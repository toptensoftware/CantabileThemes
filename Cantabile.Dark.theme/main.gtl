// Cantabile GUI Theme

// Import the default GuiKit Dark theme
import "GuiKit.Dark";

// Some common used fonts and images
var tinyFont = Font("GuiKitSans", 10, false);
var smallFont = Font("GuiKitSans", 11, false);
var defaultFont = Font("GuiKitSans", 12, false);
var boldFont = Font("GuiKitSans", 12, true);
var largeFont = Font("GuiKitSans", 18, true);
var subtleHighlight = NineSliceImage("SubtleHighlight.png", 5, 5);
var focusHighlight = NineSliceImage("FocusHighlight.png", 5, 5);
var focusHighlightPressed = NineSliceImage("FocusHighlight_pressed.png", 5, 5);
var focusHighlightTransparent = NineSliceImage("FocusHighlight.png", 5, 5).WithAlpha(0.35);

var colorToolbarButton = #a6a8ac;
var colorToolbarButtonPressed = #dfe1e5;
var colorPanelBorder = colorBorder.WithAlpha(0.3);

// The beat indicator in the main status panel
class BeatIndicator
{
	FirstBeatColor = #00FF00;
	OtherBeatsColor = #dfe1e5;
}

var makeRoundLed = (size, padding, color, glow) => Rasterize()
{
    Size = (size, size);
    Padding = padding;
    Inner = [
        Ellipse()
        {
            GradientStops = {
                0.0 = Color.White;
                1.0 = color;
            };
            GradientKind = Radial;
            RadialGradientCenter = (0.6, 0.4);
            ShadowColor = color;
            ShadowSigma = glow ? (2,2) : (0,0);
        },
        Ellipse()
        {
            StrokeColor = glow ? Color.Blend(#615f62, color.WithAlpha(0.5)) : #615f62;
            StrokeWidth = 0.75;
        }
    ];
};

// MIDI Activity Indicator
class MidiActivityIndicator
{
	Indicator = 
    {
        // Checked state is used for MIDI activity (bright led)
        Checked = makeRoundLed(16, 3, #03c403, true);

        // Indeterminate state is used for MIDI sense activity (dim led)
        Indeterminate = makeRoundLed(16, 3, #029202, false);

        // Any other state is displayed as "off".
        else = makeRoundLed(16, 3, #9e9e9e, false);
    };
}

// Key Range Indicator
class KeyRangeIndicator
{
    Frame = NineSliceImage("KeyRangeIndicatorFrame.png", 5);
    KeyRangeIndicator = NineSliceImage("KeyRangeIndicator.png", 3, 0);
    TransposeIndicator = NineSliceImage("KeyRangeIndicatorTranspose.png", 3, 0);
    OctaveIndicatorColor = #10000000;
}

// Level Meter
class LevelMeter
{
    Frame = 
    {
        // Checked state is use for when clipped indicator active
        Checked = NineSliceImage("LevelMeterFrame_clipped.png", 3);

        // Normal state
        else = NineSliceImage("LevelMeterFrame.png", 3);
    };

    // Normal indicator level color
    IndicatorColorCold = #404040;

    // Indicator color when level is high.  Will fade to this color
    // according to the hot levels reported by the control curve
    // being used for level meters
    IndicatorColorHot = #ff6600;

    // Tick Colors
    MajorTickColor = #808080;
    MinorTickColor = #808080;
}

scope KeyboardPanel
{
    class Controls
    {

    }

    class ChannelsButton
    {

    }

    class CaptureButton
    {

    }
}

// Knob
class Knob
{
    Knob = 
    {
        Focused = TileSetImage("Knob_focused.png", 8, 8);
        else = TileSetImage("Knob.png", 8, 8);
    };
}

// Combined level meter/slider
class CombinedSliderMeter
{
    Handle = 
    {
        // NB = Use ContainsFocus as the focus is actually given 
        //     to the hidden child slider control
        ContainsFocus = Image("LevelMeterHandle_hot.png", Center);
        else = Image("LevelMeterHandle.png", Center);
    };
}

// Base class for Cantabile buttons with no background highlight
class CantabileButton : Button
{
    Background = 
    {
        Pressed = focusHighlightPressed;
        Focused = focusHighlight;
    };
}

// Base class for buttons with a subtle background highlight
class SubtleButton : Button
{
    Background = 
    {
        Pressed = focusHighlightPressed;
        Focused = focusHighlight;
        else = subtleHighlight;
    };
}

// Number Pad Button
class NumberPadButton : SubtleButton
{
    Font = largeFont;
}

// Run Mode Button
class RunModeButton : CantabileButton
{
    Image = 
    {
        Error = Image("RunMode_error.png", Center);
        Checked && Indeterminate = Image("RunMode_suspended.png", Center);
        Checked = Image("RunMode_running.png", Center);
        else = Image("RunMode_unloaded.png", Center);
    };
}

// Base class for all side panels
class SidePanel
{
    Background = #202c3a;
}

// Tip Panel
class TipPanel : SidePanel
{
}

// Tip Panel button
class TipPanelButton : SubtleButton
{
    Padding = EdgeInsets(10, 3);
}

// Tip Panel Text
class TipPanelText
{
    TextColor = #FFFFFF;
}

// Slide control
class CantabileSlider : Slider
{
    Thumb =
    {
        Focused = Image("SliderHandle_focused.png", Center);
        else = Image("SliderHandle.png", Center);
    };
    TrackRange = NineSliceImage("SliderTrackRangeA.png", 5, 0);
    TrackRangeAlt = NineSliceImage("SliderTrackRangeB.png", 5, 0);
    Track = NineSliceImage("SliderTrack.png", 14, 0);
}

// SoloModeButton
class SoloModeButton : CantabileButton
{
    Image =
    {
        Indeterminate = Image("SoloButton_muted.png", Center);
        Checked = Image("SoloButton_on.png", Center);
        else = Image("SoloButton_off.png", Center);
    };
}

// Onscreen Keyboard
class OnscreenKeyboard
{
    // NB = Key images use ScaleMatchMode.Lower which means to use the lower
    //     resolution image if no exact match.  This keeps the lines between
    //     keys thinner for intermediate scaling factors.

    // White key in a normal state
    WhiteKey = NineSliceImage("OskKey_white.png", 3) { ScaleMatchMode = Lower; };

    // Middle-C key in a normal state (only used in compact mode)
    MiddleCKey = NineSliceImage("OskKey_middlec.png", 3)  { ScaleMatchMode = Lower; };

    // Black key in a normal state
    BlackKey = NineSliceImage("OskKey_black.png", 3)  { ScaleMatchMode = Lower; };

    // Black or white key highlighted (ie = showing pressed note from another source)
    HighlightedKey = NineSliceImage("OskKey_highlight.png", 3)  { ScaleMatchMode = Lower; };

    // Black or white key in pressed state
    PressedKey = NineSliceImage("OskKey_pressed.png", 3)  { ScaleMatchMode = Lower;};

    // Range indicators
    RangeHandle = 
    {
        Focused = Image("OskRangeHandle_focused.png", Center);
        else = Image("OskRangeHandle.png", Center);
    };
    RangeBar = NineSliceImage("OskOctaveBar.png", 4, 1);
    RangeFont = smallFont;
    RangeTextColor = #FFFFFF;

    // Octave indicators
    OctaveBar = 
    {
        Focused = NineSliceImage("OskOctaveBar_focused.png", 4, 1);
        else = NineSliceImage("OskOctaveBar.png", 4, 1);
    };
    OctaveLabelFont = tinyFont;
    OctaveLabelTextColor = #dfe1e5;
    OctaveLabelDividerColor = #43464c;
}

// Expand/Collapse Button
class ExpandButton : CantabileButton
{
    Image =
    {
        Checked = Image("ExpandButton_expanded.png", Center);
        else = Image("ExpandButton_collapsed.png", Center);
    };
}

// Gripper handle on the LHS of table rows
class Gripper
{
    Background = Image("Gripper_lhs.png", Center);
}

// A button in a table row
class SlotButton
{
    Background = 
    {
        Pressed = focusHighlightPressed;
        Focused = focusHighlight;
    };
    TextColor = 
    {
        Alternate = Color.Orange;       // (active transpose slot button)        
        Inactive = #808080;
        else = #FFFFFF;
    };
    Padding = EdgeInsets(3, 0);
}

// The (>) "disclosure arrow" on the rhs of some slot buttons
class DisclosureArrow
{
    Background = 
    {
        ContainerFocused = Image("DisclosureButton_focused.png", Center);
        Selected = Image("DisclosureButton_focused.png", Center);
        else = Image("DisclosureButton.png", Center);
    };
    Padding = EdgeInsets(3,4,3,3);
}

// Common base style for all table rows
class TableRow_common
{
    Background = 
    {
        Selected && ContainerFocused = VerticalGradient(#058cF5, #015DE6);
        Selected = VerticalGradient(#023258, #00255b);
        CurrentItem = #0e1721;
        else = #121212;
    };
    BorderColor = 
    {
        Selected = #00000000;        // Don't draw horizontal grid lines when selected
        else = #43464c;
    };
}

class TableRow_TopLevelItem : TableRow_common
{
}

class TableRow_ChildItem : TableRow_common
{
    Background = 
    {
        Selected && ContainerFocused = VerticalGradient(#058cF5, #015DE6);
        Selected = VerticalGradient(#023258, #00255b);
        CurrentItem = NineSliceImage("TableRowChild_focused.png", 32, 0, 0, 0);
        else = NineSliceImage("TableRowChild.png", 32, 0, 0, 0);
    };
    BorderColor = #00000000;
}

class TableRow_ChildFooter : TableRow_common
{
    Background = 
    {
        Selected && ContainerFocused = VerticalGradient(#058cF5, #015DE6);
        Selected = VerticalGradient(#023258, #00255b);
        CurrentItem = NineSliceImage("TableRowChild_focused.png", 32, 0, 0, 0);
        else = NineSliceImage("TableRowChild.png", 32, 0, 0, 0);
    };
}

scope PopupMenu
{
    class PopupBackground
    {
        fillColor = #121212;
    }

    class Title
    {
        Background = #222326;
        TextColor = #949599;
        Padding = EdgeInsets(5, 5);
        Font = boldFont;
    }

    class Item
    {
        Padding = EdgeInsets(10, 0, 0, 0);
        Gravity = LeftCenter;
        Background = 
        {
            CurrentItem = focusHighlightPressed;
            Focused = focusHighlight;
        };
        TextColor = #dfe1e5;
    }

    class QuickControllerItem : Item {}
    class QuickControllerItem_Shortcut { }
    class QuickControllerItem_Title { }
    class QuickControllerItem_Value { }


    class AccessoryContainer
    {
        Background = #222326;
    }
}

class GroupButton<align,image>
{
    Background = 
    {
        Pressed = NineSliceImage("Group" + align + ".png", 5, 5).Recolor(#404143);
        Selected = NineSliceImage("Group" + align + ".png", 5, 5).Recolor(#002d62);
        else = NineSliceImage("Group" + align + ".png", 5, 5).Recolor(#313235);
    };
    Image = 
    {
        Pressed || Selected = Image(image + ".png", Center).Recolor(#FFFFFF);
        else = Image(image + ".png", Center).Recolor(#979797);
    };
}

class TableViewButton : GroupButton<"Left","TableView"> {}
class DiagramViewButton : GroupButton<"Right","DiagramView"> {}


scope TabBar
{
    class TabBar
    {
        Background = #222326;
        BorderColor = #43464c;
    }

    class Button
    {
        Background =
        {
            Pressed = NineSliceImage("RoundedRect.png", 5, 5).Recolor(#404143);
            Selected = NineSliceImage("RoundedRect.png", 5, 5).Recolor(#002d62);
        };
        TextColor = 
        {
            Alternate = #00000000;               // In small mode, hide text on eject button
            Selected || Pressed = #dfe1e5;
            else = #949599;
        };
        Padding = EdgeInsets(15, 3);
        Font = boldFont;
    }

    class EjectButton : Button
    {
        Padding = EdgeInsets(10, 3, 30, 3);
        Image = 
        {
            Pressed && Alternate = Image("EjectButton.png", Center).Recolor(#dfe1e5);
            Alternate = Image("EjectButton.png", Center).Recolor(#949599);
            Pressed = Image("EjectButton.png", RightCenter).Recolor(#dfe1e5);
            else = Image("EjectButton.png", RightCenter).Recolor(#949599);
        };
    }

}


class ToolbarTextButton : Button
{
    Background = 
    {
        Pressed = focusHighlightPressed;
        Focused = focusHighlight;
        //LocalFocus && !Selected && !ContainerFocused = focusHighlightTransparent;
        else = NineSliceImage("RoundedRect.png", 5, 5).Recolor(#424245);
    };
    TextColor = #FFFFFF;
    Font = boldFont;
    Gravity = LeftCenter;
}

scope TickerBar
{
    class TickerView
    {
        Font = defaultFont;
    }
    class Button
    {
        Background = 
        {
            Pressed = focusHighlightPressed;
            Focused = focusHighlight;
            Checked = NineSliceImage("RoundedRect.png", 5, 5).Recolor(#707070);
            else = subtleHighlight;
        };
    }
}

class MidiChannelBar
{
    Background = BorderFrame(#252525, #555555);
}

scope TimelineView
{
    class Timeline
    {
        Background = BorderFrame(#202c3a, #555555, Top);
    }

    class Content
    {
        Color = Color.Orange;
    }

    class XAxis
    {
        Background = null;
        MinorTickFont = smallFont;
        MinorTickColor = #a0a0a0;
        MinorTickTextColor = Color.White;
        MajorTickFont = smallFont;
        MajorTickColor = #a0a0a0;
        MajorTickTextColor = Color.White;
        FocusedLabelBackground = #2a97ff;
        LabelFont = smallFont;
        LabelTickColor = #a0a0a0;
        LabelTextColor = Color.White;
    }

    class Indicator<name,topFixed,bottomFixed>
    {
        Background = 
        {
            Focused = NineSliceImage("Timeline" + name + "_hot.png", 0, topFixed, 0, bottomFixed);
            else = NineSliceImage("Timeline" + name + ".png", 0, topFixed, 0, bottomFixed);
        };
    }

    class RangeLeftIndicator : Indicator<"RangeLeft", 0, 15> {}
    class RangeRightIndicator : Indicator<"RangeRight", 0, 15> {}
    class PlayPositionIndicator : Indicator<"PlayPos", 15, 0> {}
    class CursorIndicator : Indicator<"Cursor", 0, 0>    {}
}

scope TimelinePanel
{
    class Toolbar {}
    class PlayButton {}
    class PauseButton {}
    class StopButton {}
    class RewindButton {}
    class FastForwardButton {}
    class PreviousMarkerButton {}
    class NextMarkerButton {}

}

scope WiringView
{
    class WiringView
    {
        // Main content area background color
        Background = #121212;

        // Construction guide line color
        ConstructionLineColor = #3F949599;

        // The instructional text when nothing in the diagram
        BlankSlateTextColor = Color.White;
        BlankSlateFont = defaultFont;

        // The click/drag box selection
        BoxSelectionHighlight = BorderFrame(#3f0097fb, #FF0097fb);

        // The add button
        AddButton = 
        {
            Pressed = NineSliceImage("WiringAddObject_selected.png", 3, 3);
            else = NineSliceImage("WiringAddObject.png", 3, 3);
        };
    }

    // Common settings for the input and output port areas
    class PortArea
    {
        Background = #222326;
        Overlay = 
        {
            Selected = BorderFrame(#3f0097fb, #FF0097fb);
        };
        PortTextColor = Color.White;
        PortFont = defaultFont;
        TitleFont = smallFont;
        TitleTextColor = #949599;
    }

    // The environment input port area at the left
    class InputPortArea : PortArea
    {
        PortBackground = 
        {
            Hover = NineSliceImage("WiringInputEnvPort_selected.png", 20, 3, 10, 3);
            else = NineSliceImage("WiringInputEnvPort.png", 20, 3, 10, 3);
        };
        PortTextPadding = (18, 0, 10, 0);
        PortTextAlignment = RightCenter;
    }

    // The environment output port area at the left
    class OutputPortArea : PortArea
    {
        PortBackground = 
        {
            Hover = NineSliceImage("WiringOutputEnvPort_selected.png", 10, 3, 20, 3);
            else = NineSliceImage("WiringOutputEnvPort.png", 10, 3, 20, 3);
        };
        PortTextPadding = (10, 0, 18, 0);
        PortTextAlignment = LeftCenter;
    }

    // Objects
    class Object
    {
        Background = 
        {
            Selected = NineSliceImage("WiringObject_selected.png", 3, 3);
            Alternate = NineSliceImage("WiringObject_for_recolor.png", 3, 3);        // Used as recoloring base for colored objects
            else = NineSliceImage("WiringObject.png", 3, 3);
        };
        TextColor = Color.White;
        Font = defaultFont;
    }

    // Common settings for object ports
    class ObjectPorts
    {
        Padding = (0, 3, 0, 3);
        PortTextColor = Color.White;
        PortFont = smallFont;
        WireIntrude = 5;
    }

    // The input port area for objects (appears above the main component rectangle)
    class ObjectInputPorts : ObjectPorts
    {
        Background = NineSliceImage("WiringInputPorts.png", 3, 3);
        PortBackground = 
        {
            Hover = NineSliceImage("WiringInputPort_selected.png", 3, 3);
        };
        PortTextPadding = (10, 0, 22, 0);
        PortTextAlign = LeftCenter;
    }

    // The output port area for objects (appears below the main component rectangle)
    class ObjectOutputPorts : ObjectPorts
    {
        Background = NineSliceImage("WiringOutputPorts.png", 3, 3);
        PortBackground = 
        {
            Hover = NineSliceImage("WiringOutputPort_selected.png", 3, 3);
        };
        PortTextPadding = (22, 0, 10, 0);
        PortTextAlign = RightCenter;
    }

    // Wires connecting ports
    class Wires
    {
        // Base colors for different wire types
        TypeColors = 
        {
            "MIDI" = #800000;
            "Audio" = #008000;
        };

        // These colors will be blended with the base wire color
        Colors = 
        {
            Hover = #3fFFFFFF;   // White 25% alpha
            Selected = #0480F1;
            else = Color.Clear;
        };

        // The fill color for the circles at the end of selected wires
        HandleFillColor = Color.Black;
    }
}


var svg_Play = "M 4,4 V 26 L 26,15 Z";
var svg_Pause = "m 16,5 h 8 V 25 H 16 Z M 5,5 h 8 V 25 H 5 Z";
var svg_Stop = "M 5,5 H 25 V 25 H 5 Z";
var svg_Metronome = "M 364.88477 29.025391 L 358 53.658203 L 359.37695 55.025391 L 374.52148 55.025391 L 375.89844 53.658203 L 371.94922 39.53125 L 374.02734 36.230469 L 374.91992 36.763672 L 376.33398 35.248047 L 375.10938 34.513672 L 376.62109 32.113281 L 376.26172 31.894531 L 374.74805 34.298828 L 373.56055 33.587891 L 372.83984 35.519531 L 373.66797 36.015625 L 371.79688 38.984375 L 369.01367 29.025391 L 364.88477 29.025391 z M 365.16992 33.025391 L 368.58398 33.025391 L 370.55078 40.964844 L 366.86523 46.814453 L 361.75391 46.814453 L 365.16992 33.025391 z M 370.69141 41.529297 L 372 46.814453 L 367.36328 46.814453 L 370.69141 41.529297 z";
var svg_Tempo = "M17.1931037,20.1391856 C16.5708574,19.8271084 15.3847002,18.6994228 12.6241501,20.0018117 C9.95420331,21.2614553 9.17754574,24.7921165 10.9653115,26.0463145 C13.5185812,27.8375462 18.9632794,25.4968153 19.022523,22.2547619 L18.9929012,4 L17.1634819,4 L17.1931037,20.1391856 Z";
var svg_Power = "m 20.64,14.77977 c 0,4.730174 -3.865191,8.57037 -8.64,8.57037 -4.7748086,0 -8.64,-3.840196 -8.64,-8.57037 0,-3.5076 2.1443295,-6.6232563 5.363636,-7.933098 L 7.641116,4.1696243 C 3.3471495,5.9167136 0.48,10.082608 0.48,14.77977 c 0,6.331885 5.160748,11.459259 11.52,11.459259 6.359252,0 11.52,-5.127374 11.52,-11.459259 0,-4.658494 -2.820182,-8.7969336 -7.061654,-10.5691338 L 15.350938,6.8774218 C 18.530932,8.206108 20.64,11.301033 20.64,14.77977 Z m -7.053496,-12.909685 0.001,-1.67803557 -2.880003,-0.001414 -0.0075,12.07813073 2.880004,0.0014 z";
var svg_Panic = "M 68.4768 75.1209 C 68.3276 75.1253 68.1791 75.192 68.0856 75.3503 C 68.0856 75.3503 66.1129 79.023 65.5467 80.0312 C 65.3145 80.3714 65.1692 80.9836 65.9033 80.9836 L 71.1241 80.9836 C 71.5181 80.9836 71.945 80.7408 71.5184 80.0312 L 68.9439 75.3503 C 68.8619 75.2127 68.6685 75.1153 68.4768 75.1209 Z M 68.515 76.2893 C 68.6961 76.2893 68.9439 76.3564 68.9439 77.1342 C 68.9439 77.912 68.752 79.1057 68.515 79.1057 C 68.278 79.1057 68.0856 77.912 68.0856 77.1342 C 68.0856 76.3564 68.3339 76.2893 68.515 76.2893 Z M 68.515 79.4813 C 68.752 79.4813 68.9439 79.6913 68.9439 79.9506 C 68.9439 80.2098 68.752 80.4203 68.515 80.4203 C 68.278 80.4203 68.0856 80.2098 68.0856 79.9506 C 68.0856 79.6913 68.278 79.4813 68.515 79.4813 Z";
var svg_LiveMode1 = "M 0.65429687,0.15722656 4.0244141,19.482422 H 24.162353 Z";
var svg_LiveMode2 = "M 24.003615,19.47168 H 4.075148 L 27.047805,0.15722656 Z";
var svg_LiveMode3 = "M 24,19.5 A 10,3.5 0 0 1 14,23 10,3.5 0 0 1 4,19.5 10,3.5 0 0 1 14,16 10,3.5 0 0 1 24,19.5 Z";
var svg_UpdateAvailable = "M17.56468,13.89939 L14.22453,14.27959 L15.15337,15.2541 L15.13497,15.2707 C12.53723,17.83976 8.40115,17.87787 5.75826,15.3556 L5.11267,14.73915 L3.88402,16.03666 L4.53145,16.64942 C7.85748,19.82367 13.11646,19.77734 16.3857,16.54418 L17.06623,17.25845 L17.56468,13.89933 L17.56468,13.89939 Z M10.72404,6.91168 C12.3991,6.93628 13.29294,8.47063 13.24387,9.51961 L13.62276,9.51561 C15.6137,9.52771 15.70248,12.58334 13.57496,12.5905 L7.7021,12.5915 C5.10716,12.6213 4.99608,8.87133 7.58071,8.85586 L8.13066,8.85186 C8.36998,8.07455 9.04899,6.88566 10.72405,6.91021 L10.72404,6.91168 Z M8.61652,1.65153 L7.76308,1.90807 C3.36414,3.22338 0.78684,7.82444 1.95459,12.27889 L1,12.51698 L3.65594,14.62104 L4.98759,11.52585 L3.68537,11.84885 L3.67837,11.82495 C2.75047,8.28542 4.77749,4.6661 8.27292,3.62095 L9.12635,3.36624 L8.61687,1.65162 L8.61652,1.65153 Z M12.94804,1 L9.81022,2.27167 L11.82976,4.96635 L12.19577,3.67069 L12.21967,3.67869 C15.74304,4.62466 17.87052,8.18362 17.0423,11.74795 L16.83998,12.61911 L18.57811,13.0233 L18.77676,12.154 C19.81906,7.66833 17.11544,3.14164 12.68133,1.95114 L12.94803,1.00062 L12.94804,1 Z";
var svg_BlogAvailable = "M4.20194973,7.45378537 C5.03397066,7.93430223 5.54633363,8.82229299 5.54594559,9.78310262 C5.54633363,10.7439122 5.03397066,11.631903 4.20194973,12.1124199 C3.3699288,12.5929367 2.34472472,12.5929367 1.51270379,12.1124199 C0.68068286,11.631903 0.168319884,10.7439122 0.168707921,9.78310262 C0.168319884,8.82229299 0.68068286,7.93430223 1.51270379,7.45378537 C2.34472472,6.97326851 3.3699288,6.97326851 4.20194973,7.45378537 Z M2.04455463,0.0933977209 C7.6190027,0.0933977209 12.1645545,4.82766398 12.1645545,10.6433979 L12.1645545,10.6433979 L10.7986325,10.6433979 C10.7986324,5.80156241 7.10455457,1.57031245 2.04455463,1.57031248 L2.04455463,1.57031248 Z M2.04502867,3.40191995 C6.00894144,3.40191995 9.24026104,6.62778757 9.24026104,10.5917013 L9.24026104,10.5917013 L7.68674475,10.5917013 C7.68674475,7.46811389 5.16861512,4.95543522 2.04502867,4.95543522 L2.04502867,4.95543522 Z";
var svg_MetronomeSoundsOn = "M 9,0 V 16.000001 L 3.729089,10.623048 H 0 V 5.3828129 h 3.729089 z m 2.527069,2.0287719 c 5.888576,1.788424 5.725551,10.8748441 -0.07108,11.9598481 v 0 l -0.245313,-1.310573 c 4.38823,-0.821381 4.51667,-7.9801351 -0.07108,-9.3734841 v 0 z m -0.666666,2.666666 c 3.269494,0.992981 3.179335,6.0181081 -0.07108,6.6265151 v 0 L 10.544012,10.01138 c 1.842015,-0.3447851 1.897587,-3.4422451 -0.07108,-4.0401501 v 0 z";
var svg_MetronomeSoundsOff1 = "M 3.7290881,5.3827875 9.0000006,-2.616952e-5 V 15.999977 L 3.7290881,10.623023 H -1.26892e-6 V 5.3827875 Z";
var svg_MetronomeSoundsOff2 = "M 11.859 11.7588 C 11.6563 11.9615 11.3265 11.9605 11.1224 11.7564 C 10.9169 11.5509 10.9173 11.2226 11.12 11.0199 L 13.7089 8.43099 L 11.12 5.84212 C 10.9173 5.63947 10.9184 5.30964 11.1224 5.10557 C 11.3279 4.90009 11.6562 4.90042 11.859 5.10313 L 14.4478 7.69201 L 17.0367 5.10313 C 17.2394 4.90049 17.5692 4.90151 17.7733 5.10557 C 17.9787 5.31106 17.9784 5.6394 17.7757 5.84211 L 15.1868 8.43099 L 17.7757 11.0199 C 17.9783 11.2225 17.9773 11.5523 17.7732 11.7564 C 17.5677 11.9619 17.2394 11.9616 17.0367 11.7589 L 14.4478 9.16997 Z";


class NotificationButton
{
    Background = {
        Hover = Rasterize()
        {
            Size = (18,18);
            Inner = Rectangle()
            {
                FillColor = Color.White.WithAlpha(0.2);
                CornerRadius = 3;
            };
        };
    };
}

class NotificationButton<svg, padding> : NotificationButton
{
    Image = Frame()
    {
        InnerSize = (18,18);
        Gravity = Center;
        Inner = Rasterize()
        {
            Size = (18,18);
            Padding = padding;
            Inner = Path()
            {
                SvgData = svg;
                FillColor = Color.Tomato;
            };
        };
    };
}

class StatusPanel
{
    Background = Rasterize()
    {
        Size = (390, 50);
        Inner = Rectangle()
        {
            GradientStops = {
                0.0 = Color.Black;
                1.2 = #002c5f;
            };
            GradientKind = Vertical;
            StrokeColor = #393b40;
            StrokeWidth = 1.5;
            CornerRadius = 5;
        };
    };

    class QuickControllerText 
    {
        Font = largeFont;
        Gravity = Center;
        TextColor = Color.White;
    }
    class QuickControllerPlaceholder 
    {
        TextColor = Color.White;
    }
    class Text 
    {
        TextColor = 
        {
            Error = Color.Orange;
            else = Color.White;
        };
        Font = largeFont;
        Gravity = Center;
    }
    class TransportPosition 
    {
        TextColor = Color.White;
        Font = largeFont;
        Gravity = Center;
    }
    class LoadMeter 
    {
        TextColor = Color.White;
        Gravity = Left;
    }
    class TimeSigTempo 
    {
        TextColor = Color.White;
        Gravity = Center;
    }
    class UpdateAvailableButton : NotificationButton<svg_UpdateAvailable,1> {}
    class BlogPostAvailableButton : NotificationButton<svg_BlogAvailable,3> {}
    class PromoAvailableButton : NotificationButton
    {
        Font = Font("FontAwesome", 17);
        TextColor = Color.Tomato;
    }
}

scope MidiMonitor
{
    class SidePanel {}
    class Toolbar {}
    class PauseButton {}
    class ProbePointDropDown {}
    class Stats {}
    class FileMenuButton {}
}

class ToolbarSeparator
{
    Background = colorBorder;
}


// Helper to create a record button image
var makeRecordButton = (pressed, recording, autorecord) => Rasterize()
{
    Size = (30,30);
    Gravity = Center;
    Inner = [
        Ellipse()
        {
            // The green auto-record ring
            Bounds = (0, 0, 30, 30);
            Radius = (13, 13);
            Center = (15, 15);
            StrokeWidth = autorecord ? 2 : 0;
            StrokeColor = #00FF00;
            InsetByStrokeWidth = false;
        },
        Ellipse()
        {
            // The main button fill
            Bounds = (0, 0, 30, 30);
            Radius = (autorecord ? 10 : 12, autorecord ? 10 : 12);
            Center = (15, 15);
            GradientStops = {
                0.0 = recording ? Color.Red : (pressed ? colorToolbarButtonPressed : colorToolbarButton);
                1.0 = recording ? Color.Blend(Color.Red, Color.Black.WithAlpha(0.3)) : (pressed ? colorToolbarButtonPressed : colorToolbarButton);
            };
            GradientKind = Vertical;
            ShadowColor = recording ? Color.Red : Color.Clear;
            ShadowSigma = recording ? (4,4) : (0,0);
        },
        Ellipse()
        {
            // Bevel highlight when recording
            Bounds = (0, 0, 30, 30);
            Radius = (autorecord ? 10 : 12, autorecord ? 10 : 12);
            Center = (15, 15);
            StrokeWidth = recording ? 1 : 0;
            StrokeColor = Color.Blend(Color.Red, Color.White.WithAlpha(0.5));
        },
    ];
};

// Helper to make a checkable, glowing button image (eg: Play and Pause buttons)
var makeGlowButton = (pressed, checked, svg, color, padding) => Rasterize()
{
    Size = (30,30);
    Padding = padding;
    Gravity = Center;
    Inner = [
        Path()
        {
            SvgData = svg;
            GradientStops = {
                0.0 = checked ? color : (pressed ? colorToolbarButtonPressed : colorToolbarButton);
                1.0 = checked ? Color.Blend(color, Color.Black.WithAlpha(0.3)) : (pressed ? colorToolbarButtonPressed : colorToolbarButton);
            };
            GradientKind = Vertical;
            ShadowColor = checked ? color : Color.Clear;
            ShadowSigma = checked ? (2,2) : (0,0);
            MaintainAspectRatio = true;
        },
        Path()
        {
            SvgData = svg;
            StrokeWidth = checked ? 1 : 0;
            StrokeColor = Color.Blend(color, Color.White.WithAlpha(0.5));
            MaintainAspectRatio = true;
        },
    ];
};

// Template class for glow buttons
class GlowButton<svg, color, padding>
{
    Image = Frame()
    {
        InnerSize = (30,30);
        Gravity = Center;
        Inner =
        {
            Checked = makeGlowButton(false, true, svg, color, padding);
            Pressed = makeGlowButton(true, false, svg, color, padding);
            else = makeGlowButton(false, false, svg, color, padding);
        };
    };
}

// Template class for glow buttons with alternate color
class GlowButton<svg, color, colorAlt, padding>
{
    Image = Frame()
    {
        InnerSize = (30,30);
        Gravity = Center;
        Inner =
        {
            Alternate = makeGlowButton(false, true, svg, colorAlt, padding);
            Checked = makeGlowButton(false, true, svg, color, padding);
            Pressed = makeGlowButton(true, false, svg, color, padding);
            else = makeGlowButton(false, false, svg, color, padding);
        };
    };
}

// Helper to make a standard toolbar button
var makeToolbarButton = (pressed, svg, padding) => Rasterize()
{
    Size = (30,30);
    Padding = padding;
    Gravity = Center;
    Inner = [
        Path()
        {
            SvgData = svg;
            FillColor = pressed ? colorToolbarButtonPressed : colorToolbarButton;
            MaintainAspectRatio = true;
        },
    ];
};

// Template class for standard toolbar button
class ToolbarButton<svg, padding>
{
    Image = Frame()
    {
        InnerSize = (30,30);
        Gravity = Center;
        Inner =
        {
            Pressed = makeToolbarButton(true, svg, padding);
            else = makeToolbarButton(false, svg, padding);
        };
    };
}

// Helper to make a checkable, glowing button image (eg: Play and Pause buttons)
var makeLiveModeButton = (color) => Rasterize()
{
    Size = (30,30);
    Gravity = Center;
    Inner = [
        Path()
        {
            SvgData = svg_LiveMode1;
            FillColor = color.WithAlpha(0.25);
        },
        Path()
        {
            SvgData = svg_LiveMode2;
            FillColor = color.WithAlpha(0.25);
        },
        Path()
        {
            SvgData = svg_LiveMode3;
            FillColor = color;
        },
    ];
};



class MainToolbar
{
    Background = BorderFrame(null, colorPanelBorder, Bottom);

    class RecordButton
    {
        Image = Frame()
        {
            InnerSize = (30,30);
            Gravity = Center;
            Inner =
            {
                // Checked = recording
                // Selected = auto record enabled
                Checked && Selected = makeRecordButton(false, true, true);
                Checked && !Selected = makeRecordButton(false, true, false);
                !Pressed && !Checked && Selected = makeRecordButton(false, false, true);
                !Pressed && !Checked && !Selected = makeRecordButton(false, false, false);
                Pressed && !Checked && Selected = makeRecordButton(true, false, true);
                Pressed && !Checked && !Selected = makeRecordButton(true, false, false);
                else = makeRecordButton(false, false, false);
            };
        };
    }

    class PlayButton : GlowButton<svg_Play, Color.Lime, 4> {}
    class PauseButton : GlowButton<svg_Pause, Color.Orange, 4> {}
    class StopButton : ToolbarButton<svg_Stop, 4> {}
    class MetronomeButton : ToolbarButton<svg_Metronome, 1> {}
    class TapTempoButton : ToolbarButton<svg_Tempo, 1> 
    {
        // StateChecked && ~StateAlternate for down beat
        // StateChecked && StateAlternate for other beats
        Background = 
        {
            Checked && !Alternate = Rectangle()
            {
                FillColor = Color.LimeGreen;
                CornerRadius = 3;
            };
            Checked && Alternate = Rectangle()
            {
                FillColor = #40ffffff;
                CornerRadius = 3;
            };
        };
    }
    class LiveModeButton 
    {
        Image = Frame()
        {
            InnerSize = (30,30);
            Gravity = Center;
            Inner =
            {
                Checked = makeLiveModeButton(Color.Lime);
                Pressed = makeLiveModeButton(colorToolbarButtonPressed);
                else = makeLiveModeButton(colorToolbarButton);
            };
        };
    }
    class PanicButton : ToolbarButton<svg_Panic, 2> {}
    class PowerButton : GlowButton<svg_Power, Color.LimeGreen, Color.Orange, 2> {}
}

var makeIncDecButton = (color, corners, svg) => Rasterize()
{
    Size = (24,24);
    Inner = Rectangle()
    {
        FillColor = color;
        CornerRadius = 3;
        CornerMask = corners;
    };
};

class IncDecButton<corners, svg>
{
    Background = {
        Pressed = makeIncDecButton(#3cffffff, corners, svg);
        else = makeIncDecButton(#1affffff, corners, svg);
    };
    Image = Frame()
    {
        InnerSize = (13,13);
        Inner = Rasterize()
        {
            Size = (13,13);
            Inner = Path()
            {
                Bounds = (0,0,13,13);
                SvgData = svg;
                FillColor = Color.White;
            };
        };
    };
}

var makeMetronomeSoundsImage = (color1, color2, checked) => Rasterize()
{
    Size = (18,16);
    Inner = [
        Path()
        {
            SvgData = svg_MetronomeSoundsOn;
            Bounds = (0,0,18,16);
            FillColor = checked ? color1 : Color.Clear;
        },
        Path()
        {
            SvgData = svg_MetronomeSoundsOff1;
            Bounds = (0,0,18,16);
            FillColor = checked ? Color.Clear : color1;
        },
        Path()
        {
            SvgData = svg_MetronomeSoundsOff2;
            Bounds = (0,0,18,16);
            FillColor = checked ? Color.Clear : color2;
        },
    ];
};

class MetronomeToolbar
{
    Background = BorderFrame(null, colorPanelBorder, Bottom);
    class TextButton : ToolbarTextButton
    {
        Font = defaultFont;
        Gravity = Center;
    }
    class IncTempoButton : IncDecButton<CornerMask.TopRight|CornerMask.BottomRight, "M 5.75003 0 L 5.75003 5.75003 L 0 5.75003 L 0 7.25019 L 5.75003 7.25019 L 5.75003 13.0002 L 7.25019 13.0002 L 7.25019 7.25019 L 13.0002 7.25019 L 13.0002 5.75003 L 7.25019 5.75003 L 7.25019 0 L 5.75003 0 Z"> {}
    class DecTempoButton : IncDecButton<CornerMask.TopLeft|CornerMask.BottomLeft, "m 0,5.75 h 13 v 1.5 H 0 Z"> {}
    class EnableSoundsButton : CantabileButton
    {
        Image = Frame()
        {
            InnerSize = (18,16);
            Gravity = Center;
            Inner = {
                Checked && (Focused || Pressed) = makeMetronomeSoundsImage(Color.White, Color.White, true);
                Checked = makeMetronomeSoundsImage(colorToolbarButton, Color.Tomato, true);
                Focused || Pressed = makeMetronomeSoundsImage(Color.White, Color.White, false);
                else = makeMetronomeSoundsImage(colorToolbarButton, Color.Tomato, false);
            };
        };
    }
}

scope MidiMonitor
{
    class ChannelHeader {}
    class ControllerRow {}
    class ControllerRow_Title {}
    class ControllerRow_Value {}
}

class SetListGrid
{
    // The facename for everything
    FaceName = "GuiKitSans";

    // The grid button in the toolbar
    class GridButton {}
    class PinnedButton {}

    // A song item
    class Item 
    {
        // The button itself
        class Button 
        {
            // The program number
            class ProgramNumber {}

            // The overrides label
            class Overrides {}
        }

        // Colored button
        class Button<color> : Button
        {

        }
    }

    // A set list break item
    class Title 
    {

    }
}

scope DelayLoadPopup
{

}

scope ControllerBar
{
    // The bar itself
    class ControllerBar {}

    // Smal title text above each button
    class TitleText {}

    // Larger text on composite buttons (tempo, state, song)
    class ButtonText 
    {
        // Alternate state will be set for active transpose, typically shown in highlighted color
    }

    // The button background, and for custom buttons the button text
    class Button : ButtonText {}


    class RecordButton : Button {}
    class PlayButton : Button {}
    class PauseButton : Button {}
    class StopButton : Button {}
    class TransposeButton : Button {}
    class TempoButton 
    {
        // StateChecked && ~StateAlternate for down beat
        // StateChecked && StateAlternate for other beats
    }
    class NextArrow {}
    class PreviousArrow {}
    class ContinueButton : Button {}


}

class CustomRackButton
{
    // Alternate when button is blank
}

scope SetListPanel
{
    class BreakItem
    {
    }

    class BreakItemText
    {
    }

    class SongItem
    {
    }

    class SongItemButton
    {
    }

    class SongItemText
    {
        // inactive set for the "New Song" item
        // checked set for the current song

    }
}

scope StatesPanel
{
    class StateItemButton
    {

    }

    class StateItemText
    {
        // inactive set for the "New Song" item
        // checked set for the current song

    }

    class StateItemResetIcon
    {

    }

    class StateItemLinkedIcon
    {

    }

    class StateItemLockedIcon
    {

    }
}

scope StateBehaviourPanel
{
    class BehaviourItem
    {

    }

    class BehaviourItemExportIcon
    {

    }

    class BehaviourItemEnabledIcon
    {

    }

    class BehaviourItemText
    {

    }

    class BehaviourItemNonLinkedIcon
    {

    }
}

scope RecorderPortsPanel
{
    class PortItem
    {

    }

    class AutoRecordButton
    {

    }

    class EnabledButton {}
    class PortText {}
}

scope RecordingsPanel
{
    class RecordingItem {}
    class RecordingItemPinIcon {}
    class RecordingItemText {}
    class RecordingItemInfoText {}
}

// The title bars on side panels
class PanelTitle
{

}

class PanelTitleText
{

}

class PanelTitleMenuButton
{

}

class SlotContainer
{

}

scope Profiler
{
    class Toolbar 
    {
        // StateError set when checked, show in red
    }
    class PauseButton {}
    class PreviousButton {}
    class NextButton {}
    class TimeStamp {}
    class FileMenuButton {}

    class Metric {}
    class MetricName {}
    class MetricValue {}


    class Histogram
    {

    }
}

scope BindingsPanel
{
    class EnableButton 
    {
        // Checked
        // Error
    }
    class BidiButton
    {
        // Error - bidi error
        // Checked - either bidi mode
        // Alternate - half bidi mode
    }
    class PlayButton {}
}

scope LoadMonitorPanel
{
    class Item
    {
    }
    class ItemName
    {
    }
    class ItemValue
    {
        
    }
}

scope PortsMonitorPanel
{
    class Item
    {

    }
    class ItemName
    {

    }
}

class ShowNotesPanel
{
    class Note
    {
        // State inactive set if showing hidden items

        FixedPitchFaceName = "GuiKitMono";
        VariablePitchFaceName = "GuiKitSans";

        class Text
        {
            // State inactive if showing hidden items
        }
    }
}

scope PluginEditor
{
    class Toolbar
    {

    }

    class SwitchEditorsButton {}
    class PreviousPresetButton {}
    class NextPresetButton {}
    class PresetDropDown {}
    class LockedPresetButton {}
    class NativePresetButton {}
    class BypassButton {}
    class FileMenuButton {}
    class AButton {}
    class BButton {}
    class RandomizeButton {}
    class ConstrainButton {}
    class ParameterPanel {}
    class ParameterNumber {}
    class ParameterName {}
    class ParameterValue {}
    class ParameterCheckbox {}
}

scope PromoBar
{
    class PromoBar
    {

    }
    class Icon {}
    class Title {}
    class SubTitle {}
    class ActionButton {}
    class CloseButton {}
}


scope RackPanel
{
    class SetListGridButton {}
    class TableViewButton {}
    class WiringViewButton {}
    class ZoomButton {}
}

scope RackHostSlot
{
    class TypeIcon
    {
        // Normal = linked
        // Alternate = embedded
    }
    class StateDropDown {}
    class StateDropDownWhenSongReset {}
}

scope RouteSlot
{
    class TypeIcon
    {
        // Normal = audio route
        // Alternate = midi route
    }
    class MidiFiltersButton
    {
    }
    class EnabledButton
    {
        // Checked = enabled
    }
}

scope PluginSlot
{
    class BypassButton {}
    class MidiFiltersButton {}
}

scope MediaPlayerSlot
{
    class PlayButton {}
    class PauseButton {}
    class StopButton 
    {
        // State Alternate should show linked icon
    }
}

class NotifyIcon
{
    IconBusy = Image("NotifyIcon_busy.png", Center);
    IconStopped = Image("NotifyIcon_stopped.png", Center);
    IconStoppedBusy = Image("NotifyIcon_stopped_busy.png", Center);
    IconRunning = Image("NotifyIcon_running.png", Center);
}

class PluginSelector
{
    IconFolderOpen = Image("FolderOpen.png", Center);
    IconFolderClosed = Image("FolderClosed.png", Center);
    IconPlugin = Image("Plugin.png", Center);
    IconPluginSynth = Image("PluginSynth.png", Center);
    IconPluginEffect = Image("PluginEffect.png", Center);
}