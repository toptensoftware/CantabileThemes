// Cantabile GUI Theme

// Import the default GuiKit Dark theme
import "GuiKit.Dark";

// Fonts
var fontTiny = Font("GuiKitSans", 10, false);
var fontSmall = Font("GuiKitSans", 11, false);
var fontLarge = Font("GuiKitSans", 18, true);

// Colors
var colorDimText = colorText.WithAlpha(0.7);
var colorLedOn = #03c403;
var colorLedDim = #029202;
var colorLedOff = #9e9e9e;
var colorWarning = Color.Tomato;
var colorError = Color.Red;
var colorToolbarButton = #a6a8ac;
var colorToolbarButtonPressed = #dfe1e5;
var colorPanelBorder = Color.Blend(colorForm, colorBorder.WithAlpha(0.5));
var colorSidePanelBackground = #202C3A;
var colorPlay = Color.Lime;
var colorPause = Color.Orange;
var colorMidiFilters = Color.Lime;
var colorRecord = Color.Red;
var colorBusy = Color.Orange;
var colorLiveMode = Color.Lime;
var colorStatusPanelTop = Color.Black;
var colorStatusPanelBottom = #002c5f;
var colorKeyWhite = Color.White;
var colorKeyBlack = Color.Black;
var colorKeyMiddleC = Color.Blend(colorKeyBlack, colorKeyWhite.WithAlpha(0.75));

var colorTableBackground = #121212;
var colorTableChildRow = #1e1e21;

var colorWiringBackground = #121212;

var colorFocusGradient = #015ee6;
var colorFocusPressed = #0877d1;
var colorFocusPressedGradient = #0443a0;

// SVG Paths
var svg_Play = "(30) M 4,4 V 26 L 26,15 Z";
var svg_Pause = "(30) m 16.5,5 h 8 v 20 h -8 z m -11,0 h 8 v 20 h -8 z";
var svg_Stop = "(30) M 5,5 H 25 V 25 H 5 Z";
var svg_Metronome = "(30) M 12.574225,2 5.689455,26.632812 7.066405,28 h 15.14453 l 1.37696,-1.367188 -3.94922,-14.126953 2.07812,-3.300781 0.89258,0.533203 1.41406,-1.515625 -1.2246,-0.734375 1.51171,-2.400391 -0.35937,-0.21875 -1.51367,2.404297 -1.1875,-0.710937 -0.72071,1.93164 0.82813,0.496094 -1.87109,2.96875 L 16.703125,2 Z m 0.28515,4 h 3.41406 l 1.9668,7.939453 -3.68555,5.849609 h -5.11132 z m 5.52149,8.503906 1.30859,5.285156 h -4.63672 z";
var svg_Tempo = "(30) m 17.839597,20.08855 c -0.658848,-0.330435 -1.91478,-1.524455 -4.837715,-0.145454 -2.827003,1.333739 -3.6493466,5.072086 -1.756418,6.40006 2.703462,1.896599 8.468437,-0.581822 8.531166,-4.014584 L 19.745265,3.0000001 h -1.937033 z";
var svg_Power = "(30) m 23.64,16.564938 c 0,4.730174 -3.865191,8.57037 -8.64,8.57037 -4.774809,0 -8.64,-3.840196 -8.64,-8.57037 0,-3.5076 2.1443295,-6.6232565 5.363636,-7.9330982 L 10.641116,5.9547921 C 6.3471495,7.7018814 3.48,11.867776 3.48,16.564938 c 0,6.331885 5.160748,11.459259 11.52,11.459259 6.359252,0 11.52,-5.127374 11.52,-11.459259 0,-4.658494 -2.820182,-8.7969338 -7.061654,-10.569134 L 18.350938,8.6625896 C 21.530932,9.9912758 23.64,13.086201 23.64,16.564938 Z m -7.053496,-12.9096852 10e-4,-1.6780356 -2.880003,-0.00141 -0.0075,12.0781308 2.880004,0.0014 z";
var svg_Panic = "(30) m 14.811562,4.0008617 c -0.559857,0.01651 -1.117087,0.266795 -1.467935,0.8607984 0,0 -7.4023402,13.7814039 -9.5269437,17.5645639 C 2.9453784,23.702787 2.400156,26 5.1547857,26 H 24.745265 c 1.478441,0 3.080337,-0.91108 1.479567,-3.573776 L 16.564303,4.8616601 C 16.256608,4.3453311 15.530896,3.9798483 14.811562,4.0008617 Z m 0.143342,4.3842929 c 0.679558,0 1.609399,0.2517853 1.609399,3.1703944 0,2.918609 -0.720083,7.397837 -1.609399,7.397837 -0.889317,0 -1.611277,-4.479228 -1.611277,-7.397837 0,-2.9186091 0.931718,-3.1703944 1.611277,-3.1703944 z m 0,11.9776304 c 0.889316,0 1.609399,0.788002 1.609399,1.760996 0,0.97262 -0.720083,1.762498 -1.609399,1.762498 -0.889317,0 -1.611277,-0.789878 -1.611277,-1.762498 0,-0.972994 0.72196,-1.760996 1.611277,-1.760996 z";
var svg_LiveMode1 = "(30) M 1.8032459,3.5786133 5.1733631,22.903809 H 25.311302 Z";
var svg_LiveMode2 = "(30) M 25.152564,22.893067 H 5.224097 L 28.196754,3.5786133 Z";
var svg_LiveMode3 = "(30) m 25.148949,22.921387 a 10,3.5 0 0 1 -10,3.5 10,3.5 0 0 1 -10,-3.5 10,3.5 0 0 1 10,-3.5 10,3.5 0 0 1 10,3.5 z";
var svg_UpdateAvailable = "(18) m 16.564679,12.899391 -3.340148,0.3802 0.928839,0.974509 -0.0184,0.0166 c -2.59774,2.569059 -6.73382,2.60717 -9.37671,0.0849 l -0.64559,-0.61645 -1.22865,1.297509 0.64743,0.612759 c 3.32603,3.17425 8.58501,3.12792 11.854249,-0.105239 l 0.68053,0.714269 0.49845,-3.359118 z M 9.7240405,5.91168 C 11.3991,5.93628 12.292941,7.47063 12.243869,8.51961 l 0.378891,-0.004 c 1.99094,0.0121 2.07972,3.067731 -0.0478,3.074891 l -5.87286,10e-4 C 4.10716,11.621301 3.99608,7.87133 6.58071,7.85586 l 0.54995,-0.004 C 7.36998,7.07455 8.04899,5.88566 9.7240505,5.91021 Z M 7.61652,0.65153 6.76308,0.90807 C 2.36414,2.22338 -0.21316,6.82444 0.95459,11.278891 L 0,11.516981 l 2.65594,2.10406 1.33165,-3.09519 -1.30222,0.323 -0.007,-0.0239 c -0.9279,-3.53953 1.09912,-7.15885 4.59455,-8.204 L 8.12635,2.366241 7.61687,0.651621 Z M 11.94804,0 8.81022,1.27167 l 2.01954,2.69468 0.36601,-1.29566 0.0239,0.008 c 3.52337,0.94597 5.650849,4.50493 4.822629,8.06926 l -0.20232,0.87116 1.73813,0.404191 0.19865,-0.8693 C 18.819059,6.66833 16.115439,2.14164 11.68133,0.95114 L 11.948029,6.2e-4 Z";
var svg_BlogAvailable = "(18) m 5.8644439,10.702205 c 1.2097813,0.698685 1.9547709,1.989847 1.9542068,3.38689 5.641e-4,1.397043 -0.7444255,2.688207 -1.9542068,3.386891 -1.209781,0.698685 -2.7004558,0.698685 -3.9102369,0 C 0.74442585,16.777302 -5.6390049e-4,15.486138 3.2025868e-7,14.089095 -5.6390049e-4,12.692052 0.74442585,11.40089 1.954207,10.702205 c 1.2097811,-0.698685 2.7004559,-0.698685 3.9102369,0 z M 2.7275326,0 C 10.832932,0 17.442289,6.8837524 17.442289,15.339988 v 0 H 15.456201 C 15.456199,8.2998272 10.08491,2.1474745 2.7275326,2.1474745 v 0 z m 6.894e-4,4.8106817 c 5.7636372,0 10.462064,4.6904995 10.462064,10.4541373 v 0 h -2.258855 c 0,-4.54178 -3.6614292,-8.1952838 -8.203209,-8.1952838 v 0 z";
var svg_MetronomeSoundsOn = "(18,16) M 9,0 V 16.000001 L 3.729089,10.623048 H 0 V 5.3828129 h 3.729089 z m 2.527069,2.0287719 c 5.888576,1.788424 5.725551,10.8748441 -0.07108,11.9598481 v 0 l -0.245313,-1.310573 c 4.38823,-0.821381 4.51667,-7.9801351 -0.07108,-9.3734841 v 0 z m -0.666666,2.666666 c 3.269494,0.992981 3.179335,6.0181081 -0.07108,6.6265151 v 0 L 10.544012,10.01138 c 1.842015,-0.3447851 1.897587,-3.4422451 -0.07108,-4.0401501 v 0 z";
var svg_MetronomeSoundsOff1 = "(18,16) M 3.7290881,5.3827875 9.0000006,-2.616952e-5 V 15.999977 L 3.7290881,10.623023 H -1.26892e-6 V 5.3827875 Z";
var svg_MetronomeSoundsOff2 = "(18,16) M 11.859 11.7588 C 11.6563 11.9615 11.3265 11.9605 11.1224 11.7564 C 10.9169 11.5509 10.9173 11.2226 11.12 11.0199 L 13.7089 8.43099 L 11.12 5.84212 C 10.9173 5.63947 10.9184 5.30964 11.1224 5.10557 C 11.3279 4.90009 11.6562 4.90042 11.859 5.10313 L 14.4478 7.69201 L 17.0367 5.10313 C 17.2394 4.90049 17.5692 4.90151 17.7733 5.10557 C 17.9787 5.31106 17.9784 5.6394 17.7757 5.84211 L 15.1868 8.43099 L 17.7757 11.0199 C 17.9783 11.2225 17.9773 11.5523 17.7732 11.7564 C 17.5677 11.9619 17.2394 11.9616 17.0367 11.7589 L 14.4478 9.16997 Z";
var svg_Hamburger = "(22) m 0,16 h 22 v 4 H 0 Z M 0,9 h 22 v 4 H 0 Z M 0,2 H 22 V 6 H 0 Z";
var svg_Lock = "(16) M 5.74746 7.37984 C 5.74746 6.9536 5.74746 6.52565 5.74746 5.56417 C 5.74746 5.09453 5.96741 4.57376 6.3514 4.17429 C 6.77109 3.73769 7.33905 3.4869 7.99197 3.4869 C 8.68193 3.4869 9.24962 3.73809 9.65944 4.17682 C 10.0272 4.57055 10.2365 5.09079 10.2365 5.56417 C 10.2365 6.49467 10.2365 6.639 10.2365 7.37984 Z M 11.8365 7.37984 C 11.8365 6.639 11.8365 6.49467 11.8365 5.56417 C 11.8365 4.68137 11.4707 3.77191 10.8287 3.08462 C 10.119 2.32482 9.12922 1.88689 7.99197 1.88689 C 5.82875 1.88689 4.14746 3.63592 4.14746 5.56417 C 4.14746 6.52565 4.14746 6.9536 4.14746 7.37984 L 3.8667 7.37984 C 3.38743 7.37984 3.00002 7.76778 3.00002 8.24632 L 3.00002 13.2467 C 3.00002 13.7245 3.38805 14.1132 3.8667 14.1132 L 12.1334 14.1132 C 12.6126 14.1132 13.0001 13.7253 13.0001 13.2467 L 13.0001 8.24632 C 13.0001 7.76849 12.612 7.37984 12.1334 7.37984 Z";
var svg_Reset = "(16) M 8.233061,2.067029 5.502995,4.797612 8.233061,7.527678 V 5.480258 5.305591 c 1.898839,0.120208 3.401859,1.698033 3.401859,3.627169 0,2.00743 -1.62742,3.63492 -3.63492,3.63492 -2.00745,0 -3.63492,-1.62749 -3.63492,-3.63492 0,-0.20399 -0.07571,-0.584639 -0.646989,-0.610299 -0.38086,-0.01711 -0.620423,0.186209 -0.718303,0.610299 0,2.76143 2.238792,5.000211 5.000212,5.000211 2.7614,0 5.000212,-2.238781 5.000212,-5.000211 0,-2.683314 -2.113942,-4.872794 -4.767151,-4.994527 z";
var svg_Linked = "(16) M 9.8084556,7.122902 C 9.6251588,7.2818723 9.186838,7.7183416 8.8217514,8.1045029 8.3439583,6.8878232 7.1297524,6.9616101 6.5838542,7.5394011 6.32293,7.8155692 4.9995706,9.1263871 4.6238497,9.5003644 4.2229156,9.8994378 4.2106931,10.810194 4.7036037,11.270271 c 0.4929107,0.460076 1.2910038,0.595083 1.8802505,0 l 0.5616163,-0.562072 c 0.044655,-0.04491 0.081422,-0.08204 0.1045917,-0.105679 0.3036963,0.167093 1.151273,0.290976 1.6962249,0.1997 l -0.00642,0.0063 -0.049611,0.0488 c -0.097283,0.0958 -0.3149702,0.310641 -0.6034329,0.59826 L 8.0579821,11.684222 C 7.8575143,11.884918 7.6342466,12.109522 7.4002957,12.346737 6.6592563,13.098113 4.9902586,13.363108 3.78988,12.257253 2.5895014,11.151399 2.9669612,9.3342938 3.5484454,8.7022904 4.6129737,7.5452761 5.4705601,6.7673632 5.7851528,6.461827 6.7794977,5.4961072 8.95159,5.512516 9.8084556,7.122902 Z M 12.21012,3.7427467 c 1.200379,1.1058542 0.822919,2.9229595 0.241435,3.5549629 C 11.387026,8.4547239 10.52944,9.2326368 10.214847,9.538173 9.2205023,10.503893 7.04841,10.487484 6.1915444,8.877098 6.3748412,8.7181277 6.813162,8.2816584 7.1782486,7.8954971 7.6560417,9.1121768 8.8702476,9.0383899 9.4161458,8.4605989 9.67707,8.1844308 11.000429,6.8736129 11.37615,6.4996356 11.777084,6.1005622 11.789307,5.1898059 11.2964,4.7297293 c -0.49291,-0.4600766 -1.291004,-0.5950833 -1.8802502,0 L 8.8545295,5.2918015 C 8.8098745,5.3367164 8.773107,5.3738368 8.7499378,5.3974804 8.4462415,5.2303867 7.5986648,5.1065044 7.053713,5.1977805 l 0.00642,-0.0063 0.049611,-0.048802 C 7.2070258,5.04688 7.4247133,4.8320343 7.713176,4.5444148 L 7.9420179,4.3157782 C 8.1424857,4.1150819 8.3657534,3.8904776 8.5997043,3.6532632 9.3407437,2.9018869 11.009741,2.6368924 12.21012,3.7427467 Z";
var svg_Unlinked = "(16) M 5.34913,7.15163 6.23476,8.03628 C 6.13036,8.14093 6.01626,8.25492 5.89939,8.37146 L 5.59623,8.67337 C 5.29576,8.97229 5.01654,9.24927 4.87754,9.38762 4.50673,9.75671 4.49543,10.599 4.9513,11.0245 c 0.45587,0.4255 1.194,0.5504 1.73896,0 0,0 0.77089,-0.6855 1.33795,-1.19415 L 8.86164,10.6656 C 8.41893,11.0748 7.85497,11.6048 7.44536,12.0201 6.76,12.715 5.21642,12.9601 4.10624,11.9373 2.99606,10.9146 3.34516,9.23403 3.88295,8.64952 4.45742,8.02514 4.96672,7.52013 5.34913,7.15163 Z M 10.588,8.92521 9.70241,8.04056 C 9.80681,7.93592 9.92091,7.82192 10.0378,7.70538 l 0.3031,-0.30191 c 0.3005,-0.29891 0.5797,-0.5759 0.7187,-0.71425 0.3708,-0.36908 0.3821,-1.2114 -0.0737,-1.63691 -0.4559,-0.4255 -1.19402,-0.55036 -1.73899,0 0,0 -0.77089,0.68557 -1.33794,1.19418 L 7.07553,5.41121 C 7.51824,5.00203 8.0822,4.47206 8.49182,4.05674 9.17717,3.36182 10.7208,3.11674 11.8309,4.1395 12.9411,5.16225 12.592,6.84282 12.0542,7.42733 11.4798,8.05171 10.9704,8.55672 10.588,8.92521 Z M 6.20628,2.94941 C 6.14152,2.94912 6.07932,2.97472 6.03353,3.02052 5.98773,3.06631 5.96213,3.12851 5.96242,3.19327 v 1.96171 c 1.9e-4,0.06445 0.026,0.12618 0.07175,0.17158 C 6.07991,5.37197 6.14183,5.39732 6.20628,5.39703 6.3398,5.39663 6.44794,5.2885 6.44833,5.15498 V 3.19327 C 6.44862,3.12882 6.42327,3.0669 6.37786,3.02116 6.33246,2.97541 6.27073,2.9496 6.20628,2.94941 Z M 3.24204,5.91365 c -0.13352,4e-4 -0.24165,0.10853 -0.24205,0.24205 4e-4,0.13352 0.10853,0.24166 0.24205,0.24205 H 5.20556 C 5.33907,6.39736 5.44721,6.28922 5.44761,6.1557 5.44721,6.02218 5.33907,5.91405 5.20556,5.91365 Z M 4.19038,3.89775 C 4.12585,3.89807 4.0641,3.92407 4.01878,3.97 c -0.09473,0.0948 -0.09473,0.24842 0,0.34321 L 5.40606,5.7005 c 0.0948,0.09472 0.24842,0.09472 0.34321,0 0.09473,-0.0948 0.09473,-0.24841 0,-0.34321 L 4.36199,3.97 C 4.31666,3.92407 4.25491,3.89807 4.19038,3.89775 Z M 9.79371,10.603 c -0.13351,4e-4 -0.24165,0.1085 -0.24205,0.242 v 1.9617 c -2.9e-4,0.0645 0.02506,0.1264 0.07047,0.1721 0.0454,0.0458 0.10713,0.0716 0.17158,0.0718 0.06477,3e-4 0.12696,-0.0253 0.17276,-0.0711 0.04583,-0.0458 0.07143,-0.108 0.07113,-0.1728 V 10.845 C 10.0374,10.7806 10.0116,10.7188 9.96583,10.6734 9.92008,10.628 9.85816,10.6027 9.79371,10.603 Z M 10.7944,9.60224 c -0.1335,4e-4 -0.2416,0.10854 -0.242,0.24205 4e-4,0.13352 0.1085,0.24161 0.242,0.24201 H 12.758 C 12.8915,10.0859 12.9996,9.97781 13,9.84429 12.9996,9.71077 12.8915,9.60264 12.758,9.60224 Z M 10.4223,10.229 c -0.0642,-10e-5 -0.126,0.0252 -0.1716,0.0705 -0.0947,0.0948 -0.0947,0.2484 0,0.3432 L 11.638,12.03 c 0.0948,0.0947 0.2484,0.0947 0.3432,0 0.0947,-0.0948 0.0947,-0.2484 0,-0.3432 L 10.5939,10.2995 C 10.5483,10.2542 10.4866,10.2289 10.4223,10.229 Z";
var svg_Next = "(30) M 9.5000001,9.5000001 V 20.5 L 20.5,15 Z";
var svg_Prev = "(30) M 20.5,9.5000001 V 20.5 L 9.5000001,15 Z";
var svg_Continue = "(30) M 14.0379 6.71173 L 14.0379 12.3972 L 2.94607 6.85074 L 2.94607 21.4757 L 14.0379 15.9298 L 14.0379 21.3361 L 28.6628 14.0239 L 14.0379 6.71173 Z";
var svg_PinIcon = "(14) m 2.0992185,12.099264 1.2674847,-1.763439 1.0344,-1.1932161 c 0,0 -1.0727304,-1.1604609 -1.7146542,-1.8023685 C 2.2200994,6.8738966 3.7241385,5.7081121 4.9984832,6.1869214 5.3818146,6.330949 5.7999756,6.0781623 6.0623546,5.8823699 7.9223974,4.4943652 7.3013688,4.9567836 8.8056202,3.7619655 9.3772088,3.3079627 8.7373917,2.9668505 8.9513659,2.6139548 9.0506736,2.4504411 9.510345,1.8001094 9.9959492,2.262165 l 0.8121738,0.8357293 1.128098,1.1045682 C 12.398284,4.6880666 11.747967,5.1478026 11.584362,5.2470199 11.231428,5.4611515 10.890354,4.8212618 10.436364,5.3928404 9.2415355,6.8970842 9.7039564,6.2760709 8.315945,8.1361061 8.1201879,8.3984842 7.8673841,8.8166489 8.0112355,9.1999851 8.4900164,10.474335 7.324266,11.978357 6.8579165,11.512013 6.2159955,10.870105 5.0555318,9.7973546 5.0555318,9.7973546 L 3.8623089,10.831781 Z";
var svg_Check = "(14) m 5.6663104,8.7191647 c 0,0 4.9336276,-5.3715434 5.2020016,-5.6627203 0.42591,-0.4465684 1.266173,0.1224778 0.883621,0.6665371 0,0 -4.6950248,6.6437125 -4.9835323,7.0498825 -0.5590645,0.783477 -1.433741,0.59621 -1.8540381,0.09523 0,0 -2.024489,-2.6947755 -2.4894798,-3.3248317 C 2.1458174,7.1329896 2.6885477,6.4666358 3.239409,6.8327478 3.6182519,7.1359897 5.6663104,8.7191647 5.6663104,8.7191647 Z";
var svg_Export = "(14) m 5.8794745,4.4416234 c 0,0 1.1971942,-1.1799565 1.5394637,-1.5478035 C 7.7682616,2.5183916 7.6097495,2.0507795 7.1178142,2 c 0,0 -3.1075764,0 -4.3397894,0 C 2.2897407,2 2,2.397888 2,2.7978756 V 7.0387597 C 2,7.6073454 2.5953379,7.7501145 2.8916937,7.4423604 3.3834693,6.9316701 4.4833469,5.8857192 4.4833469,5.8857192 c 0,0 3.0438566,3.0833381 3.7838001,3.7672177 1.080996,0.9990901 2.413745,-0.3682 1.33168,-1.4596722 z";
var svg_FastForward = "(30) M 2.5001 7.39127 L 2.5001 22.6084 L 14.4565 15.6342 L 14.4565 22.6084 L 27.5001 15.0001 L 14.4565 7.39127 L 14.4565 14.366 L 2.5001 7.39127 Z";
var svg_Rewind = "(30) M 27.5001,7.39127 V 22.6084 L 15.5437,15.6342 v 6.9742 L 2.5001,15.0001 15.5437,7.39127 V 14.366 Z";
var svg_PreviousMarker = "(30) M 17.884615,15 27.5,9.2307693 V 20.769231 Z M 8.2692308,15 17.884615,9.2307693 V 20.769231 Z M 2.5,3.4615386 H 6.3461537 V 26.538462 H 2.5 Z";
var svg_NextMarker = "(30) M 12.115385,15 2.5,9.2307693 V 20.769231 Z m 9.615384,0 -9.615384,-5.7692307 V 20.769231 Z M 27.5,3.4615386 H 23.653846 V 26.538462 H 27.5 Z";
var svg_Enabled = "(30) m 11.229195,19.426983 c 0,0 11.227679,-12.6944296 11.838434,-13.3825591 0.969259,-1.055371 2.881486,0.2894218 2.010893,1.5752069 0,0 -10.684679,15.7009102 -11.341247,16.6607992 -1.272289,1.851569 -3.262829,1.409011 -4.2193233,0.225068 0,0 -4.6072203,-6.368496 -5.6654148,-7.857492 -0.6351098,-0.969593 0.5999908,-2.544367 1.8536516,-1.679147 0.8621761,0.716618 5.5230065,4.458124 5.5230065,4.458124 z";
var svg_Disabled = "(30) M 5.8714167,4.267809 A 1.6052977,1.6059266 0 0 0 4.736578,4.7391841 1.6052977,1.6059266 0 0 0 4.738348,7.0093083 l 7.991212,7.9903597 -7.9907696,7.990359 a 1.6052977,1.6059266 0 0 0 -0.00133,2.271453 1.6052977,1.6059266 0 0 0 2.2705624,0 l 7.9920972,-7.991246 7.991655,7.991246 a 1.6052977,1.6059266 0 0 0 2.271004,0 1.6052977,1.6059266 0 0 0 -0.0018,-2.271453 l -7.990732,-7.989916 7.991654,-7.9908027 a 1.6052977,1.6059266 0 0 0 0.0013,-2.2701242 1.6052977,1.6059266 0 0 0 -2.270562,-0.00177 L 15.000122,12.729543 7.0071404,4.7374135 A 1.6052977,1.6059266 0 0 0 5.8714167,4.267809 Z";
var svg_BypassOff = "(30) m 15,21.730769 c 1.593129,0 2.884615,1.291487 2.884615,2.884616 C 17.884615,26.208513 16.593129,27.5 15,27.5 c -1.593129,0 -2.884615,-1.291487 -2.884615,-2.884615 0,-1.593129 1.291486,-2.884616 2.884615,-2.884616 z m 1.346177,-19.2307688 -2.3e-5,11.5384618 h 6.346154 L 15,21.730769 7.3076924,14.038462 h 6.1538456 l 2.4e-5,-11.5384618 z";
var svg_BypassOn = "(30) m 15.659,1.29519 v 3.4744 c 0,-0.01373 0.0869,0.06878 0.1595,0.06878 4.2271,0 7.6701,3.34723 7.6701,7.49693 0,4.1497 -3.443,7.497 -7.6701,7.497 0.0027,0 -0.1595,0.154 -0.1595,0.0687 v 0 1.1005 h 6.259 l -7.7033,7.7033 -7.7033,-7.7033 h 6.2589 V 19.901 c 0,-1.4582 1.3268,-2.8 2.789,-2.9446 l 0.2592,-0.0129 c 2.6496,0 4.7813,-2.0724 4.7813,-4.6082 0,-2.53577 -2.1317,-4.6082 -4.7813,-4.6082 -1.6355,0 -3.0482,-1.34151 -3.0482,-2.95751 v 0 -3.4744 z m -1.4443,8.15139 c 1.5954,0 2.8887,1.29332 2.8887,2.88872 0,1.5954 -1.2933,2.8887 -2.8887,2.8887 -1.5954,0 -2.8888,-1.2933 -2.8888,-2.8887 0,-1.5954 1.2934,-2.88872 2.8888,-2.88872 z";
var svg_EmbeddedRack = "(30) M 28.75,6.40625 V 2.96875 H 24.453125 V 4.6875 h 2.578125 v 1.7187499 z m -27.5000001,0 V 2.96875 H 5.546875 V 4.6875 H 2.9687499 V 6.40625 Z M 28.75,23.59375 v 3.4375 H 24.453125 V 25.3125 h 2.578125 v -1.71875 z m -27.5000001,0 v 3.4375 H 5.546875 V 25.3125 H 2.9687499 V 23.59375 Z M 28.75,8.1250001 V 21.875 H 1.2499999 V 8.1250001 Z M 23.59375,16.71875 H 6.4062499 v 3.4375 H 23.59375 Z M 4.2578125,17.148437 c -0.7119305,0 -1.2890626,0.577133 -1.2890626,1.289063 0,0.71193 0.5771321,1.289062 1.2890626,1.289062 0.7119303,0 1.2890625,-0.577132 1.2890625,-1.289062 0,-0.71193 -0.5771322,-1.289063 -1.2890625,-1.289063 z m 21.4843755,0 c -0.71193,0 -1.289063,0.577133 -1.289063,1.289063 0,0.71193 0.577133,1.289062 1.289063,1.289062 0.71193,0 1.289062,-0.577132 1.289062,-1.289062 0,-0.71193 -0.577132,-1.289063 -1.289062,-1.289063 z M 23.59375,9.84375 H 6.4062499 v 3.4375 H 23.59375 Z M 4.2578125,10.273438 c -0.7119305,0 -1.2890626,0.577132 -1.2890626,1.289062 0,0.71193 0.5771321,1.289063 1.2890626,1.289063 0.7119303,0 1.2890625,-0.577133 1.2890625,-1.289063 0,-0.71193 -0.5771322,-1.289062 -1.2890625,-1.289062 z m 21.4843755,0 c -0.71193,0 -1.289063,0.577132 -1.289063,1.289062 0,0.71193 0.577133,1.289063 1.289063,1.289063 0.71193,0 1.289062,-0.577133 1.289062,-1.289063 0,-0.71193 -0.577132,-1.289062 -1.289062,-1.289062 z";
var svg_LinkedRack = "(30) m 27.5,8.75 v 12.5 H 2.5 V 8.75 Z m -4.6875,7.8125 H 7.1875 v 3.125 h 15.625 z M 5.234375,16.953125 c -0.6472094,0 -1.171875,0.524666 -1.171875,1.171875 0,0.647209 0.5246656,1.171875 1.171875,1.171875 0.6472094,0 1.171875,-0.524666 1.171875,-1.171875 0,-0.647209 -0.5246656,-1.171875 -1.171875,-1.171875 z m 19.53125,0 c -0.647209,0 -1.171875,0.524666 -1.171875,1.171875 0,0.647209 0.524666,1.171875 1.171875,1.171875 0.647209,0 1.171875,-0.524666 1.171875,-1.171875 0,-0.647209 -0.524666,-1.171875 -1.171875,-1.171875 z M 22.8125,10.3125 H 7.1875 v 3.125 h 15.625 z M 5.234375,10.703125 c -0.6472094,0 -1.171875,0.524666 -1.171875,1.171875 0,0.647209 0.5246656,1.171875 1.171875,1.171875 0.6472094,0 1.171875,-0.524666 1.171875,-1.171875 0,-0.647209 -0.5246656,-1.171875 -1.171875,-1.171875 z m 19.53125,0 c -0.647209,0 -1.171875,0.524666 -1.171875,1.171875 0,0.647209 0.524666,1.171875 1.171875,1.171875 0.647209,0 1.171875,-0.524666 1.171875,-1.171875 0,-0.647209 -0.524666,-1.171875 -1.171875,-1.171875 z";
var svg_Error = "(30) m 24.087336,18.341025 c 3.214655,0 5.820646,2.605991 5.820646,5.820646 0,3.214654 -2.605991,5.820645 -5.820646,5.820645 -3.214654,0 -5.820645,-2.605991 -5.820645,-5.820645 0,-3.214655 2.605991,-5.820646 5.820645,-5.820646 z m 4.157604,4.989125 h -8.315208 v 1.663042 h 8.315208 z";
var svg_MidiFilter = "(30) M 16.757226,25.999984 H 13.533882 V 15.98935 L 4.8558523,6.0640494 V 3.9999965 H 25.144126 v 2.0640529 l -8.3869,9.9253006 z";
var svg_BidiOff = "(30) M 18.309366,17.732362 2.5,17.73235 V 12.462562 H 18.309366 V 7.8515 L 27.5,15.097462 18.309366,22.1485 Z";
var svg_BidiHalf = "(30) M 11.028787,24.781998 5.4e-5,16.08686 H 30 v 3.161865 H 11.028787 Z M 18.971213,5.218002 29.999946,13.913141 H 0 v -3.161867 h 18.971213 z";
var svg_BidiHalfForward = "(30) m 18.971213,5.218002 11.028733,8.695139 H 0 v -3.161867 h 18.971213 z";
var svg_BidiHalfReverse = "(30) M 11.028787,24.781998 5.4e-5,16.08686 H 30 v 3.161865 H 11.028787 Z";
var svg_BidiFull = "(30) M 8.3792826,12.686557 H 21.620662 V 8.4825485 L 30,15.088829 21.620662,21.517451 v -4.02635 H 8.3792826 v 4.02635 L -2.5e-7,15.088829 8.3792826,8.4825485 Z";
var svg_CombinedSliderHandle = "(12) m 2.2455271,6.3673507 3.7544792,-4.367356 v 0 L 9.754482,6.3673507 C 9.91292,6.5516189 10,6.7865976 10,7.0295946 v 1.954536 C 10,9.5451823 9.545177,10.000005 8.9841267,10.000005 H 3.0158745 C 2.4548224,10.000005 2,9.5451823 2,8.9841306 V 7.0295946 C 2,6.7865817 2.087111,6.5516277 2.2455271,6.3673507 Z";
var svg_RunModeSuspended = "(16) M 4.08106 6.88036 L 11.919 6.88036 L 11.919 9.11978 L 4.08106 9.11978 Z";
var svg_RunModeError = "(16) M 5.0967147,4.5866912 C 4.9612905,4.5868059 4.8314564,4.6407231 4.7357857,4.7366069 4.5367559,4.9361941 4.5370182,5.2593368 4.736343,5.4586125 L 7.277895,7.9998857 4.7364906,10.541159 c -0.095835,0.09574 -0.1497355,0.225636 -0.149801,0.361126 -8.2e-5,0.135473 0.053655,0.265438 0.1493748,0.361289 0.095753,0.09587 0.2256359,0.149637 0.3610601,0.149637 0.1354406,0 0.2653239,-0.05377 0.3610765,-0.149637 L 8.0000316,8.7220224 10.541715,11.263574 c 0.09575,0.09587 0.225668,0.149801 0.361142,0.149801 0.135457,0 0.265373,-0.05393 0.361126,-0.149801 0.09579,-0.09587 0.149391,-0.225849 0.149391,-0.361322 -1.64e-4,-0.13549 -0.0541,-0.26539 -0.149949,-0.361093 L 8.7220208,8.0000168 11.263704,5.4586125 C 11.463045,5.2592876 11.463209,4.9361449 11.26413,4.7366069 11.168443,4.6407231 11.038609,4.5867731 10.903168,4.5866748 10.767744,4.58656 10.637812,4.6402969 10.541993,4.7360332 L 8.0000316,7.2778802 5.4579223,4.7360332 C 5.3620877,4.6402969 5.2321389,4.5865764 5.0967147,4.5866912 Z";
var svg_SoloMode = "(16) m 5.0407106,11.43094 c 0.2254709,0.107741 0.5354874,0.196821 0.9300623,0.267265 0.3945738,0.07044 0.8298511,0.10566 1.3058447,0.10566 0.4509417,0 0.8674301,-0.03108 1.2494791,-0.09323 0.3820477,-0.06216 0.7171173,-0.155387 1.0052183,-0.279696 0.288101,-0.124316 0.513571,-0.281768 0.67641,-0.472377 0.16284,-0.190608 0.244259,-0.418508 0.244259,-0.683703 0,-0.33978 -0.172233,-0.621545 -0.516702,-0.8453033 C 9.590813,9.2057985 9.1617981,9.0069061 8.6482253,8.8328717 8.1346526,8.6588387 7.577248,8.4889503 6.9759923,8.323204 6.3747367,8.1574565 5.8173308,7.9627074 5.3037581,7.7389492 4.7901853,7.5151912 4.361171,7.2458564 4.0167023,6.9309388 3.6722324,6.6160201 3.5,6.218234 3.5,5.7375678 3.5,5.0331444 3.9039624,4.4841172 4.7119001,4.0904693 5.5198376,3.6968202 6.6127284,3.499999 7.9906055,3.499999 c 0.8643043,0 1.6096005,0.037289 2.2359075,0.1118813 0.626308,0.074592 1.158664,0.174033 1.597079,0.2983426 V 6.0483443 H 10.621086 V 4.705803 L 10.320459,4.395029 C 10.082463,4.3287263 9.737998,4.2790025 9.2870564,4.2458577 8.8361145,4.2127127 8.3914434,4.1961339 7.9530277,4.1961339 c -0.7515696,0 -1.3402904,0.1139477 -1.7661802,0.3418518 -0.4258886,0.2279016 -0.638831,0.549031 -0.638831,0.9633973 0,0.3397807 0.1722324,0.6236179 0.5167024,0.8515196 0.3444686,0.2279015 0.7734829,0.4330098 1.2870557,0.615331 0.5135727,0.1823212 1.0709786,0.3584243 1.6722343,0.5283152 0.6012551,0.1698896 1.1586611,0.3646399 1.6722351,0.5842534 0.513572,0.2196147 0.942587,0.4827336 1.287055,0.7893654 C 12.327769,9.1767985 12.5,9.5580099 12.5,10.013814 c 0,0.803872 -0.469723,1.419198 -1.409186,1.845995 -0.939462,0.426798 -2.2233732,0.640192 -3.8517742,0.640192 -0.8893575,0 -1.6597046,-0.06216 -2.3110641,-0.186463 C 4.2766151,12.189222 3.8006278,12.056632 3.5,11.915748 V 9.653316 h 1.202505 v 1.479279 z";
var svg_SoloModeMute = "(16) M 5.7680324,10.869041 C 5.5933208,11.043812 5.3089633,11.04287 5.1330259,10.866984 4.9558715,10.689812 4.9561543,10.406783 5.1309259,10.232012 L 7.3629028,8.0000006 5.1309259,5.7680324 C 4.9562143,5.5933208 4.9570972,5.3089633 5.1330259,5.1330259 5.310189,4.9558715 5.5932608,4.9561543 5.7680324,5.1309259 L 8.0000006,7.3629028 10.232012,5.1309259 c 0.174686,-0.1747116 0.459,-0.1738287 0.634972,0.0021 0.177171,0.1771631 0.176828,0.4602349 0.0021,0.6350065 L 8.6371071,8.0000006 10.869041,10.232012 c 0.174771,0.174686 0.173829,0.459 -0.0021,0.634972 -0.177172,0.177171 -0.460286,0.176828 -0.635058,0.0021 L 8.0000006,8.6371071 Z";
var svg_Increment = "(13) M 5.75003 0 L 5.75003 5.75003 L 0 5.75003 L 0 7.25019 L 5.75003 7.25019 L 5.75003 13.0002 L 7.25019 13.0002 L 7.25019 7.25019 L 13.0002 7.25019 L 13.0002 5.75003 L 7.25019 5.75003 L 7.25019 0 L 5.75003 0 Z";
var svg_Decrement = "(13) m 0,5.75 h 13 v 1.5 H 0 Z";
var svg_gripper_lhs = "(6,14) M 2.5,12.703704 A 1.25,1.2962964 0 0 1 1.25,14 1.25,1.2962964 0 0 1 0,12.703704 1.25,1.2962964 0 0 1 1.25,11.407408 1.25,1.2962964 0 0 1 2.5,12.703704 Z M 6,10.111111 A 1.25,1.2962964 0 0 1 4.75,11.407407 1.25,1.2962964 0 0 1 3.5,10.111111 1.25,1.2962964 0 0 1 4.75,8.8148143 1.25,1.2962964 0 0 1 6,10.111111 Z M 6,4.4074073 A 1.25,1.2962964 0 0 1 4.75,5.7037036 1.25,1.2962964 0 0 1 3.5,4.4074073 1.25,1.2962964 0 0 1 4.75,3.1111109 1.25,1.2962964 0 0 1 6,4.4074073 Z M 2.5,7 A 1.25,1.2962964 0 0 1 1.25,8.2962964 1.25,1.2962964 0 0 1 0,7 1.25,1.2962964 0 0 1 1.25,5.7037036 1.25,1.2962964 0 0 1 2.5,7 Z m 0,-5.7037036 A 1.25,1.2962964 0 0 1 1.25,2.5925927 1.25,1.2962964 0 0 1 0,1.2962964 1.25,1.2962964 0 0 1 1.25,0 1.25,1.2962964 0 0 1 2.5,1.2962964 Z";
var svg_gripper_rhs = "(6,14) M 3.5,12.703704 A -1.25,1.2962964 0 0 0 4.75,14 -1.25,1.2962964 0 0 0 6,12.703704 -1.25,1.2962964 0 0 0 4.75,11.407408 -1.25,1.2962964 0 0 0 3.5,12.703704 Z M 0,10.111111 A -1.25,1.2962964 0 0 0 1.25,11.407407 -1.25,1.2962964 0 0 0 2.5,10.111111 -1.25,1.2962964 0 0 0 1.25,8.8148143 -1.25,1.2962964 0 0 0 0,10.111111 Z M 0,4.4074073 A -1.25,1.2962964 0 0 0 1.25,5.7037036 -1.25,1.2962964 0 0 0 2.5,4.4074073 -1.25,1.2962964 0 0 0 1.25,3.1111109 -1.25,1.2962964 0 0 0 0,4.4074073 Z M 3.5,7 A -1.25,1.2962964 0 0 0 4.75,8.2962964 -1.25,1.2962964 0 0 0 6,7 -1.25,1.2962964 0 0 0 4.75,5.7037036 -1.25,1.2962964 0 0 0 3.5,7 Z m 0,-5.7037036 A -1.25,1.2962964 0 0 0 4.75,2.5925927 -1.25,1.2962964 0 0 0 6,1.2962964 -1.25,1.2962964 0 0 0 4.75,0 -1.25,1.2962964 0 0 0 3.5,1.2962964 Z";
var svg_arrow = "(16) M 6.3432312,3.3488998 5.0056673,4.6864641 8.312701,8.0065032 5.0056673,11.313536 6.3432312,12.6511 10.32555,8.6687821 10.994333,8.0000001 Z";


// Rounded off focused rectangle
var focusHighlight = Rectangle()
{
    CornerRadius = 3;
    GradientStops = {
        0.0 = colorFocus;
        1.0 = colorFocusGradient;
    };
    GradientKind = Vertical;
};

// Rounded off pressed rectangle
var focusHighlightPressed = Rectangle()
{
    CornerRadius = 3;
    GradientStops = {
        0.0 = colorFocusPressed;
        1.0 = colorFocusPressedGradient;
    };
    GradientKind = Vertical;
};

// Rounded off subtle highlight rectangle
var subtleHighlight = Rectangle()
{
    CornerRadius = 3;
    FillColor = colorText.WithAlpha(0.1);
};


// Make a round led image
var makeRoundLed = (size, padding, color, glow) => Rasterize()
{
    Size = (size, size);
    Padding = padding;
    Inner = [
        Ellipse()
        {
            GradientStops = {
                0.0 = Color.White;
                1.0 = color;
            };
            GradientKind = Radial;
            RadialGradientCenter = (0.6, 0.4);
            ShadowColor = color;
            ShadowSigma = glow ? (size / 8 , size / 8) : (0,0);
        },
        Ellipse()
        {
            StrokeColor = glow ? Color.Blend(#615f62, color.WithAlpha(0.5)) : #615f62;
            StrokeWidth = 0.75;
        }
    ];
};

// Make a square led image
var makeSquareLed = (size, padding, color, glow) => Rasterize()
{
    Size = (size, size);
    Padding = padding;
    Inner = [
        Rectangle()
        {
            CornerRadius = size / 8;
            GradientStops = {
                0.0 = Color.White;
                1.0 = color;
            };
            GradientKind = Radial;
            RadialGradientCenter = (0.6, 0.4);
            ShadowColor = color;
            ShadowSigma = glow ? (size / 8, size / 8) : (0,0);
        },
        Rectangle()
        {
            CornerRadius = size / 8;
            StrokeColor = glow ? Color.Blend(#615f62, color.WithAlpha(0.5)) : #615f62;
            StrokeWidth = 0.75;
        }
    ];
};

var gripper_lhs = Rasterize()
{
    Size = (6,14);
    Inner = Path()
    {
        SvgData = svg_gripper_lhs;
        FillColor = colorBrightBorder;
    };
};

var gripper_rhs = Rasterize()
{
    Size = (6,14);
    Inner = Path()
    {
        SvgData = svg_gripper_rhs;
        FillColor = colorBrightBorder;
    };
};




// Helper to rasterize an image
var makeImage = (size, svg, color) => Rasterize()
{
    Size = (size, size);
    Inner = Path()
    {
        SvgData = svg;
        FillColor = color;
    };
};

// Helper to rasterize a 2-color image
var makeImage2 = (size, svg, color, svg2, color2) => Rasterize()
{
    Size = (size, size);
    Inner = [
        Path()
        {
            SvgData = svg;
            FillColor = color;
        },
        Path()
        {
            SvgData = svg2;
            FillColor = color2;
        },
    ];
};


// Template class for glow buttons
class GlowButton<size, svg, color>
{
    Image = Frame()
    {
        InnerSize = (size, size);
        Gravity = Center;
        Inner =
        {
            Checked = makeGlowImage(size, svg, color);
            Pressed = makeImage(size, svg, colorToolbarButtonPressed);
            else = makeImage(size, svg, colorToolbarButton);
        };
    };
}


// Template class for glow buttons with alternate color
class GlowButton<size, svg, color, colorAlt>
{
    Image = Frame()
    {
        InnerSize = (size, size);
        Gravity = Center;
        Inner =
        {
            Alternate = makeGlowImage(size, svg, colorAlt);
            Checked = makeGlowImage(size, svg, color);
            Pressed = makeImage(size, svg, colorToolbarButtonPressed);
            else = makeImage(size, svg, colorToolbarButton);
        };
    };
}

// Helper to make a standard toolbar button
var makeToolbarButton = (size, pressed, svg) => Rasterize()
{
    Size = (size, size);
    Gravity = Center;
    Inner = [
        Path()
        {
            SvgData = svg;
            FillColor = pressed ? colorToolbarButtonPressed : colorToolbarButton;
            MaintainAspectRatio = true;
        },
    ];
};

// Template class for standard toolbar button
class ToolbarButton<size, svg>
{
    Image = Frame()
    {
        InnerSize = (size, size);
        Gravity = Center;
        Inner =
        {
            Pressed = makeToolbarButton(size, true, svg);
            else = makeToolbarButton(size, false, svg);
        };
    };
}



// The beat indicator in the main status panel
class BeatIndicator
{
	FirstBeatColor = #00FF00;
	OtherBeatsColor = #dfe1e5;
}


// MIDI Activity Indicator
class MidiActivityIndicator
{
	Indicator = 
    {
        // Checked state is used for MIDI activity (bright led)
        Checked = makeRoundLed(16, 3, colorLedOn, true);

        // Indeterminate state is used for MIDI sense activity (dim led)
        Indeterminate = makeRoundLed(16, 3, colorLedDim, false);

        // Any other state is displayed as "off".
        else = makeRoundLed(16, 3, colorLedOff, false);
    };
}

// Key Range Indicator
class KeyRangeIndicator
{
    Frame = Rectangle()
    {
        FillColor = Color.Blend(colorForm, colorText.WithAlpha(0.75));
        StrokeWidth = 1;
        StrokeColor = colorPanelBorder;
        CornerRadius = 1.5;
    };
    KeyRangeIndicator = colorForm.WithAlpha(0.7);
    TransposeIndicator = colorForm.WithAlpha(0.4);
    OctaveIndicatorColor = colorForm.WithAlpha(0.1);
}

// Level Meter
class LevelMeter
{
    Frame = 
    {
        // Checked state is use for when clipped indicator active
        Checked = Rectangle()
        {
            FillColor = colorBaseBackground;
            StrokeWidth = 1;
            StrokeColor = colorWarning;
            CornerRadius = 1.5;
        };

        // Normal state
        else = Rectangle()
        {
            FillColor = colorBaseBackground;
            StrokeWidth = 1;
            StrokeColor = colorPanelBorder;
            CornerRadius = 1.5;
        };
    };

    // Normal indicator level color
    IndicatorColorCold = Color.Blend(colorForm, colorText.WithAlpha(0.15));

    // Indicator color when level is high.  Will fade to this color
    // according to the hot levels reported by the control curve
    // being used for level meters
    IndicatorColorHot = colorWarning;

    // Tick Colors
    MajorTickColor = colorDisabledText;
    MinorTickColor = colorDisabledText;
}

// Knob
class Knob
{
    Knob = 
    {
        Focused = TileSetImage("Knob_focused.png", 8, 8);
        else = TileSetImage("Knob.png", 8, 8);
    };
}

// Combined level meter/slider
class CombinedSliderMeter
{
    Handle = 
    {
        // NB = Use ContainsFocus as the focus is actually given 
        //     to the hidden child slider control
        ContainsFocus = makeHandle(colorFocus);
        else = makeHandle(Color.Blend(colorForm, colorText.WithAlpha(0.5)));
    };

    const makeHandle = (color) => Rasterize()
    {
        Size = (12,12);
        Inner = Path()
        {
            SvgData = svg_CombinedSliderHandle;
            FillColor = color; 
        };
    };
}

// Background for buttons that don't have a background (except when pressed/focused)
class TransparentButton : Button
{
    Background = 
    {
        Pressed = focusHighlightPressed;
        Focused = focusHighlight;
    };
}


// Background for buttons with a subtle background highlight
class SubtleButton : Button
{
    Background = 
    {
        Pressed = focusHighlightPressed;
        Focused = focusHighlight;
        else = subtleHighlight;
    };
}

// Side panel content (the dark blue color)
class SidePanelContent
{
    Background = colorSidePanelBackground;
}


// Number Pad Button
class NumberPadButton : SubtleButton
{
    Font = fontLarge;
}

// Run Mode Button
class RunModeButton : TransparentButton
{
    Image = 
    {
        Error = makeIndicator(16, 4, svg_RunModeError, colorError);
        Checked && Indeterminate = makeIndicator(16, 4, svg_RunModeSuspended, colorWarning);
        Checked = makeSquareLed(16, 4, colorLedOn, true);
        else = makeSquareLed(16, 4, colorLedOff, false);
    };

    // Make a run mode suspended/error indicator
    const makeIndicator = (size, padding, svg, color) => Rasterize()
    {
        Size = (size, size);
        Padding = padding;
        Inner = [
            Rectangle()
            {
                Bounds = (0, 0, 16, 16);
                Position = (0, 0, 16, 16);
                CornerRadius = size / 8;
                FillColor = Color.White;
                StrokeColor = color;
                StrokeWidth = 0.75;
            },
            Path()
            {
                SvgData = svg;
                FillColor = color;
            }
        ];
    };
}


// Tip Panel
class TipPanel : SidePanelContent
{
    class Text
    {
        TextColor = colorText;
    }

    class Button : SubtleButton
    {
        Padding = (10, 3);
    }
}


// Slider control
class CantabileSlider : Slider
{
    Thumb = Frame()
    {
        Size = (19, 19);
        Inner =
        {
            Focused = makeThumb(colorFocus);
            else = makeThumb(Color.Blend(colorForm, colorText.WithAlpha(0.85)));
        };
    };

    Track = Frame()
    {
        Size = (10, 4);
        Padding = (5, 0);
        Inner = Rectangle()
        {
            CornerRadius = 2;
            FillColor = colorBrightBorder;
        };
    };
    TrackRange = Color.Blend(colorBaseForeground, colorLedOn.WithAlpha(0.75));
    TrackRangeAlt = Color.Blend(colorBaseForeground, colorFocus.WithAlpha(0.75));
    TickColor = Color.Blend(colorForm, colorText.WithAlpha(0.5));
    TickTextColor = colorText;

    const makeThumb = (color) => Rasterize()
    {
        Size = (19,19);
        Inner = Ellipse()
        {
            Bounds = (0, 0, 1, 1);
            Center = (0.5, 0.5);
            Radius = (0.33, 0.33);
            FillColor = color;
            ShadowColor = Color.Black;
            ShadowSigma = (1.5,1.5);
        };
    };

}

// SoloModeButton
class SoloModeButton : TransparentButton
{
    Image = Frame()
    {
        InnerSize = (18, 18);
        Gravity = Center;
        Inner = 
        {
            Indeterminate = makeImage(18, svg_SoloModeMute, colorWarning);
            Checked = makeGlowImage(18, svg_SoloMode, colorLedOn);
            else = makeImage(18, svg_SoloMode, colorToolbarButton);
        };
    };
}


// Onscreen Keyboard
class OnscreenKeyboard
{
    // NB = Key images use ScaleMatchMode.Lower which means to use the lower
    //     resolution image if no exact match.  This keeps the lines between
    //     keys thinner for intermediate scaling factors.

    // White key in a normal state
    WhiteKey = makeKey(colorKeyWhite);

    // Middle-C key in a normal state (only used in compact mode)
    MiddleCKey = makeKey(colorKeyMiddleC);

    // Black key in a normal state
    BlackKey = makeKey(colorKeyBlack);

    // Black or white key highlighted (ie = showing pressed note from another source)
    HighlightedKey = makeKey(Color.Blend(Color.White, colorFocus.WithAlpha(0.7)));

    // Black or white key in pressed state
    PressedKey = makeKey(colorFocus);

    // Range indicators
    RangeHandle = 
    {
        Focused = makeRangeHandle(colorFocus);
        else = makeRangeHandle(colorBrightBorder);
    };
    RangeFont = fontSmall;
    RangeTextColor = #FFFFFF;

    // Octave indicators
    OctaveBar = 
    {
        Focused = colorFocus;
        else = colorBrightBorder;
    };
    OctaveLabelFont = fontTiny;
    OctaveLabelTextColor = colorDimText;
    OctaveLabelDividerColor = colorDimText.WithAlpha(0.3);

    const makeKey = (color) => Path()
    {
        SvgData = "M 0,0 V 15.596453 C 0,15.820019 0.17998194,16 0.40354689,16 H 15.596453 c 0.223565,0 0.403546,-0.179981 0.403546,-0.403547 V 0";
        FillColor = color;
        StrokeColor = #808080;
        StrokeWidth = 1;
    };

    const makeRangeHandle = (color) => Rasterize()
    {
        Size = (9, 9);
        Inner = Ellipse()
        {
            FillColor = Color.White;
            StrokeColor = color;
            StrokeWidth = 1.5;
        };
    };
}

// Expand/Collapse Button
class ExpandButton : TransparentButton
{
    Image =
    {
        (Focused || Selected || Pressed) && Checked = make(colorFocusText, 90);
        (Focused || Selected || Pressed) = make(colorFocusText, 0);
        Checked = make(colorToolbarButton, 90);
        else = make(colorToolbarButton, 0);
    };

    const make = (color, rotation) => Rasterize()
    {
        Size = (16, 16);
        Inner = Path()
        {
            SvgData = "(16) m 6,4 4,4 -4,4 z";
            FillColor = color;
            Rotate = Degrees(rotation);
        };
    };
}

// Gripper handle on the LHS of table rows
class Gripper
{
    Background = Frame()
    {
        InnerSize = (6,14);
        Inner = gripper_lhs;
    };
}

// A button in a table row
class SlotButton
{
    Background = 
    {
        Pressed = focusHighlightPressed;
        Focused = focusHighlight;
    };
    TextColor = 
    {
        Alternate = colorWarning;       // (active transpose slot button)        
        Inactive = colorDisabledText;
        else = colorText;
    };
    Padding = EdgeInsets(3, 0);
}

// The (>) "disclosure arrow" on the rhs of some slot buttons
class DisclosureArrow
{
    Background = Frame()
    {
        InnerSize = (16, 16);
        Inner = 
        {
            Selected || ContainerFocused = make(colorFocusText, colorFocus);
            else = make(colorBorder, colorText);
        };
    };
    Padding = EdgeInsets(3,4,3,3);

    const make = (colorButton, colorArrow) => Rasterize()
    {
        Size = (16,16);
        Inner = [
            Ellipse()
            {
                Bounds = (0, 0, 16, 16);
                Center = (8, 8);
                Radius = (7, 7);
                FillColor = colorButton;
            },
            Path()
            {
                SvgData = svg_arrow;
                FillColor = colorArrow;
            }
        ];
    };

}

class TableView
{
    Background =  colorTableBackground;
}

// Common base style for all table rows
class TableRow_common
{
    Background = 
    {
        Selected && ContainerFocused = VerticalGradient(colorFocus, colorFocusGradient);
        Selected = VerticalGradient(Color.Blend(colorBaseBackground, colorFocus.WithAlpha(0.8)), Color.Blend(colorBaseBackground, colorFocusGradient.WithAlpha(0.8)), );
        CurrentItem = BorderFrame(colorFocus.WithAlpha(0.2), colorPanelBorder, Bottom);
        else = BorderFrame(null, colorPanelBorder, Bottom);
    };
}

class TableRow_TopLevelItem : TableRow_common
{
}

class TableRow_TopLevelFooter : TableRow_common
{
    Background = 
    {
        Selected && ContainerFocused = VerticalGradient(colorFocus, colorFocusGradient);
        Selected = VerticalGradient(Color.Blend(colorBaseBackground, colorFocus.WithAlpha(0.8)), Color.Blend(colorBaseBackground, colorFocusGradient.WithAlpha(0.8)), );
        CurrentItem = colorFocus.WithAlpha(0.2);
    };
}

class TableRow_ChildItem : TableRow_common
{
    Background = 
    {
        Selected && ContainerFocused = VerticalGradient(colorFocus, colorFocusGradient);
        Selected = VerticalGradient(Color.Blend(colorBaseBackground, colorFocus.WithAlpha(0.8)), Color.Blend(colorBaseBackground, colorFocusGradient.WithAlpha(0.8)), );
        CurrentItem = make(Color.Blend(colorTableChildRow, colorFocus.WithAlpha(0.2)));
        else = make(colorTableChildRow);
    };

    const make  = (colorRow) => Frame()
    {
        Padding = (32, 0, 0, 0);
        Inner = BorderFrame(colorRow, colorPanelBorder, Left);
    };

}

class TableRow_ChildFooter : TableRow_common
{
    Background = 
    {
        Selected && ContainerFocused = VerticalGradient(colorFocus, colorFocusGradient);
        Selected = VerticalGradient(Color.Blend(colorBaseBackground, colorFocus.WithAlpha(0.8)), Color.Blend(colorBaseBackground, colorFocusGradient.WithAlpha(0.8)), );
        CurrentItem = make(Color.Blend(colorTableChildRow, colorFocus.WithAlpha(0.2)));
        else = make(colorTableChildRow);
    };


    const make  = (colorRow) => [
        Frame()
        {
            Padding = (32, 0, 0, 0);
            Inner = BorderFrame(colorRow, colorPanelBorder, Left);
        },
        BorderFrame(Color.Clear, colorPanelBorder, Bottom),
    ];
}

context PopupMenu
{
    class PopupBackground
    {
        fillColor = #121212;
    }

    class Title
    {
        Background = #222326;
        TextColor = #949599;
        Padding = EdgeInsets(5, 5);
        Font = fontBold;
    }

    class Item
    {
        Padding = EdgeInsets(10, 0, 0, 0);
        Gravity = LeftCenter;
        Background = 
        {
            CurrentItem = focusHighlightPressed;
            Focused = focusHighlight;
        };
        TextColor = #dfe1e5;
    }

    class QuickControllerItem : Item {}
    class QuickControllerItem_Shortcut { }
    class QuickControllerItem_Title { }
    class QuickControllerItem_Value { }


    class AccessoryContainer
    {
        Background = #222326;
    }
}

var svg_TableView = "(16) m 9.5000033,11.500004 h 4.0000027 c 0.554,0 1,0.446 1,1 0,0.554001 -0.446,1.000001 -1,1.000001 H 9.5000033 c -0.5540002,0 -1.0000004,-0.446 -1.0000004,-1.000001 0,-0.554 0.4460002,-1 1.0000004,-1 z m -7.0000105,0 h 4.0000024 c 0.5540003,0 1.0000005,0.446 1.0000005,1 0,0.554001 -0.4460002,1.000001 -1.0000005,1.000001 H 2.4999928 c -0.5540002,0 -1.0000004,-0.446 -1.0000004,-1.000001 0,-0.554 0.4460002,-1 1.0000004,-1 z M 9.5000033,8.5000134 h 4.0000027 c 0.554,0 1,0.4460002 1,1.0000004 0,0.5540002 -0.446,1.0000002 -1,1.0000002 H 9.5000033 c -0.5540002,0 -1.0000004,-0.446 -1.0000004,-1.0000002 0,-0.5540002 0.4460002,-1.0000004 1.0000004,-1.0000004 z m -7.0000105,0 h 4.0000024 c 0.5540003,0 1.0000005,0.4460002 1.0000005,1.0000004 0,0.5540002 -0.4460002,1.0000002 -1.0000005,1.0000002 H 2.4999928 c -0.5540002,0 -1.0000004,-0.446 -1.0000004,-1.0000002 0,-0.5540002 0.4460002,-1.0000004 1.0000004,-1.0000004 z M 9.5000033,5.5000525 h 4.0000027 c 0.554,0 1,0.4460002 1,1.0000004 0,0.5540003 -0.446,1.0000005 -1,1.0000005 H 9.5000033 c -0.5540002,0 -1.0000004,-0.4460002 -1.0000004,-1.0000005 0,-0.5540002 0.4460002,-1.0000004 1.0000004,-1.0000004 z m -7.0000105,0 h 4.0000024 c 0.5540003,0 1.0000005,0.4460002 1.0000005,1.0000004 0,0.5540003 -0.4460002,1.0000005 -1.0000005,1.0000005 H 2.4999928 c -0.5540002,0 -1.0000004,-0.4460002 -1.0000004,-1.0000005 0,-0.5540002 0.4460002,-1.0000004 1.0000004,-1.0000004 z m 7.0000105,-3.000048 h 4.0000027 c 0.554,0 1,0.4460002 1,1.0000005 0,0.5540003 -0.446,1.0000005 -1,1.0000005 H 9.5000033 c -0.5540002,0 -1.0000004,-0.4460002 -1.0000004,-1.0000005 0,-0.5540003 0.4460002,-1.0000005 1.0000004,-1.0000005 z m -7.0000105,0 h 4.0000024 c 0.5540003,0 1.0000005,0.4460002 1.0000005,1.0000005 0,0.5540003 -0.4460002,1.0000005 -1.0000005,1.0000005 H 2.4999928 c -0.5540002,0 -1.0000004,-0.4460002 -1.0000004,-1.0000005 0,-0.5540003 0.4460002,-1.0000005 1.0000004,-1.0000005 z";
var svg_WiringView = "(16) M 11,1.5 V 3.50195 C 9.81339,3.52725 9.03216,3.78137 8.51172,4.22461 7.96258,4.69228 7.77804,5.30894 7.64258,5.80468 7.50712,6.30043 7.40284,6.67759 7.16797,6.91992 6.96833,7.1259 6.63298,7.30905 5.91602,7.35937 5.63117,6.29225 4.65355,5.5 3.5,5.5 2.12521,5.5 1,6.62521 1,8 c 0,1.37478 1.12521,2.5 2.5,2.5 1.19728,0 2.20498,-0.85399 2.44532,-1.98243 0.69311,0.0545 1.02027,0.23778 1.21875,0.44922 0.23699,0.25248 0.34322,0.64895 0.47851,1.16016 C 7.77787,10.63816 7.95784,11.26809 8.50586,11.75 9.02525,12.20672 9.81113,12.46968 11,12.49609 V 14.5 L 15,12 11,9.5 v 1.99609 C 9.96812,11.47099 9.4529,11.25226 9.16602,11 8.86115,10.7319 8.73873,10.36183 8.60938,9.87304 8.48003,9.38425 8.35959,8.78072 7.89258,8.2832 7.77308,8.15589 7.63463,8.04168 7.47461,7.94336 7.63223,7.84896 7.76795,7.73973 7.88672,7.61718 8.35586,7.13315 8.47825,6.5411 8.60742,6.06836 8.7366,5.59561 8.8564,5.24502 9.16016,4.98632 9.44599,4.7429 9.96584,4.52659 11,4.50195 V 6.5 L 15,4 Z m -7.5,5 C 4.33435,6.5 5,7.16565 5,8 5,8.83434 4.33435,9.5 3.5,9.5 2.66565,9.5 2,8.83434 2,8 2,7.16565 2.66565,6.5 3.5,6.5 Z";
var svg_ZoomRack = "(16) M 14,2.4999995 V 13.5 H 1.9999999 V 2.4999995 Z m -1,2 H 2.9999998 V 12.499998 H 13 Z";
var svg_UnzoomRack = "(16) m 1.999875,2.50005 v 4.9997 1.0005 4.9997 h 12.00025 v -4.9997 -1.0005 -4.9997 z m 1.00045,1.9999 h 9.9999 v 2.9998 h -9.9999 z m 0,5.0002 h 9.9999 v 2.9998 h -9.9999 z";
var svg_Eject = "(16) M 13,9.9416683 V 11.941666 H 2.9999999 V 9.9416683 Z M 8.0000021,1.9416666 13,7.9416676 H 2.9999999 c 0,0 1.2011944,-1.518331 2.5589521,-3.158624 l 0.3156283,-0.380061 c 0.6878288,-0.825396 1.3947138,-1.654428 1.9900648,-2.312554 z";

class TabBarButton 
{
    Background =
    {
        Pressed = Frame() { Padding = (0, 0, 0, 1); Inner = colorFocusPressed; };
        Hover = Frame() { Padding = (0, 0, 0, 1); Inner = colorBaseForeground.WithAlpha(0.1); };
        Selected = Frame() { Padding = (0, 0, 0, 1); Inner = #002d62; };
    };
}

class TableViewButton : TabBarButton
{
    Image = Frame()
    {
        InnerSize = (16,16);
        Inner = {
            Hover || Selected = makeImage(16, svg_TableView, colorFocusText);
            else = makeImage(16, svg_TableView, colorToolbarButton);
        };
    };
}

class WiringViewButton : TabBarButton
{
    Image = Frame()
    {
        InnerSize = (16,16);
        Inner = {
            Hover || Selected = makeImage(16, svg_WiringView, colorText);
            else = makeImage(16, svg_WiringView, colorToolbarButton);
        };
    };
}

class MaximizeRackButton : TabBarButton
{
    Background =
    {
        Pressed = Frame() { Padding = (0, 0, 0, 1); Inner = colorFocusPressed; };
        Hover = Frame() { Padding = (0, 0, 0, 1); Inner = colorBaseForeground.WithAlpha(0.1); };
    };

    Image = Frame()
    {
        InnerSize = (16,16);
        Inner = {
            Hover && Checked = makeImage(16, svg_UnzoomRack, colorText);
            Checked = makeImage(16, svg_UnzoomRack, colorToolbarButton);
            Hover = makeImage(16, svg_ZoomRack, colorFocusText);
            else = makeImage(16, svg_ZoomRack, colorToolbarButton);
        };
    };
}


class TabBar
{
    Background = BorderFrame(colorForm, colorPanelBorder, Bottom);

    class Tab : TabBarButton
    {
        TextColor = 
        {
            Hover = colorFocusText;
            Alternate = #00000000;               // In small mode, hide text on eject button
            Selected || Pressed = #dfe1e5;
            else = #949599;
        };
        Padding = EdgeInsets(15, 7);
        Font = fontBold;
    }

    class EjectButton : TabBar.Tab
    {
        Padding = EdgeInsets(10, 3, 30, 3);
        Image = 
        {
            Alternate && Hover = make(colorFocusText, Gravity.Center);
            Alternate && Pressed = make(#dfe1e5, Gravity.Center);
            Alternate = make(#949599, Gravity.Center);
            Hover = make(colorFocusText, Gravity.RightCenter);
            Pressed = make(#dfe1e5, Gravity.RightCenter);
            else = make(#949599, Gravity.RightCenter);
        };


        const make = (color, align) => Frame()
        {
            InnerSize = (16,16);
            InnerGravity = align;
            Padding = (10, 0);
            Inner = Rasterize()
            {
                Size = (16,16);
                Inner = Path()
                {
                    SvgData = svg_Eject;
                    FillColor = color;
                };
            };
        };
    }
}


class ToolbarTextButton : Button
{
    Background = 
    {
        Pressed = focusHighlightPressed;
        Focused = focusHighlight;
        else = subtleHighlight;
    };
    TextColor = #FFFFFF;
    Font = fontBold;
    Gravity = LeftCenter;
}

class TickerView
{
    Font = fontBold;

    class Item
    {
        Background = 
        {
            Pressed = focusHighlightPressed;
            Focused = focusHighlight;
            Checked = subtleHighlight;
        };
        TextColor = 
        {
            Pressed || Focused || Checked = colorText;
            else = colorDisabledText;
        };
    }
}

class TickerBar
{
    Background = BorderFrame(null, colorPanelBorder, Bottom);
}

class MidiChannelBar
{
    Background = BorderFrame(#252525, #555555);
}

class TimelineView
{
    Background = #202C3A;

    class Content
    {
        Color = {
            Focused = colorFocus;
            else = #808080;
        };
    }

    class XAxis
    {
        Background = null;
        MinorTickFont = fontSmall;
        MinorTickColor = #a0a0a0;
        MinorTickTextColor = Color.White;
        MajorTickFont = fontSmall;
        MajorTickColor = #a0a0a0;
        MajorTickTextColor = Color.White;
        FocusedLabelBackground = #2a97ff;
        LabelFont = fontSmall;
        LabelTickColor = #a0a0a0;
        LabelTextColor = Color.White;
    }

    class RangeLeftIndicator
    {
        Background = [
            Frame()
            {
                Padding = (0, 0, 0, 15);
                Inner = BorderFrame(null, colorText, CenterVertical);
            },
            Frame()
            {
                IntrudeAmount = 15;
                IntrudeEdge = Bottom;
                Inner = Frame()
                {
                    Padding = (9, 2, 0, 0);
                    Inner = {
                        Focused = BorderFrame(null, colorFocus, Bottom | Left, 3);
                        else = BorderFrame(null, colorText, Bottom | Left, 3);
                    };
                };
            },
        ];
    }
    class RangeRightIndicator
    {
        Background = [
            Frame()
            {
                Padding = (0, 0, 0, 15);
                Inner = BorderFrame(null, colorText, CenterVertical);
            },
            Frame()
            {
                IntrudeAmount = 15;
                IntrudeEdge = Bottom;
                Inner = Frame()
                {
                    Padding = (0, 2, 9, 0);
                    Inner = {
                        Focused = BorderFrame(null, colorFocus, Bottom | Right, 3);
                        else = BorderFrame(null, colorText, Bottom | Right, 3);
                    };
                };
            },
        ];
    }
    class PlayPositionIndicator 
    {
        Background = [
            Frame()
            {
                Padding = (0, 15, 0, 0);
                Inner = BorderFrame(null, colorWarning, CenterVertical);
            },
            Frame()
            {
                IntrudeAmount = 2;
                IntrudeEdge = Top;
                Inner = BorderFrame(null, colorWarning, CenterVertical);
            },
            {
                Focused = make(colorFocus);
                else = make(colorWarning);
            },
        ];

        const make = (color) => Frame()
        {
            InnerSize = (21,14);
            InnerGravity = Top;
            Inner = Rasterize()
            {
                Size = (21, 14);
                Inner = Path()
                {
                    SvgData = "(21, 14) M 12,13 17,6 V 3 H 4 v 3 l 5,7 z";
                    FillColor = color;
                };
            };
        };
    }
    class CursorIndicator
    {
        Background = BorderFrame(null, colorWarning.WithAlpha(0.5), CenterVertical);
    }
}

var colorWiringAddButton = #383838;
var colorComponentTop = #6f6f6f;
var colorComponentBottom = #595959;
var colorWiringPortArea = #222326;
var colorWiringSelectedPort = #013f99;
var colorWiringPort = #595959;

class WiringView
{
    // Main content area background color
    Background = colorWiringBackground;

    // Construction guide line color
    ConstructionLineColor = colorPanelBorder;

    // The instructional text when nothing in the diagram
    BlankSlateTextColor = colorText;
    BlankSlateFont = fontNormal;

    // The click/drag box selection
    BoxSelectionHighlight = BorderFrame(colorFocus.WithAlpha(0.25), colorFocus);

    // The add button
    AddButton = 
    {
        Pressed = makeAddButton(colorFocus, colorFocusGradient, colorText);
        else = makeAddButton(colorWiringAddButton, colorWiringAddButton, colorWiringBackground);
    };

    const makeAddButton = (colorButtonTop, colorButtonBottom, colorPlus) => [
        Rectangle()
        {
            GradientStops = {
                0.0 = colorButtonTop;
                1.0 = colorButtonBottom;
            };
            GradientKind = Vertical;
            CornerRadius = 3;
        },
        Frame()
        {
            InnerSize = (31,31);
            Inner = Path()
            {
                SvgData = "(16) M 5.93555 0 L 5.93555 5.93555 L 0 5.93555 L 0 10.0645 L 5.93555 10.0645 L 5.93555 16 L 10.0645 16 L 10.0645 10.0645 L 16 10.0645 L 16 5.93555 L 10.0645 5.93555 L 10.0645 0 L 5.93555 0 Z";
                FillColor = colorPlus;
            };
        }
    ];

    // Common settings for the input and output port areas
    class PortArea
    {
        Background = colorWiringPortArea;
        Overlay = 
        {
            Selected = BorderFrame(colorFocus.WithAlpha(0.25), colorFocus);
        };
        PortTextColor = Color.White;
        PortFont = fontNormal;
        TitleFont = fontSmall;
        TitleTextColor = colorDimText;
    }


    // The environment input port area at the left
    class InputPortArea : PortArea
    {
        PortBackground = 
        {
            Hover = makePort(colorWiringSelectedPort);
            else = makePort(colorWiringPort);
        };
        PortTextPadding = (18, 0, 10, 0);
        PortTextAlignment = RightCenter;

        const makePort = (color) => [
            Frame()
            {
                Padding = (16, 0, 0, 0);
                Inner = Rectangle() { FillColor = color; CornerRadius = 3; };
            },
            Frame()
            {
                IntrudeAmount = 15;
                IntrudeEdge = Left;
                InnerSize = (6,14);
                Inner = gripper_lhs;
            },
        ];
    }

    // The environment output port area at the left
    class OutputPortArea : PortArea
    {
        PortBackground = 
        {
            Hover = makePort(colorWiringSelectedPort);
            else = makePort(colorWiringPort);
        };
        PortTextPadding = (10, 0, 18, 0);
        PortTextAlignment = LeftCenter;

        const makePort = (color) => [
            Frame()
            {
                Padding = (0, 0, 16, 0);
                Inner = Rectangle() { FillColor = color; CornerRadius = 3; };
            },
            Frame()
            {
                IntrudeAmount = 15;
                IntrudeEdge = Right;
                InnerSize = (6,14);
                Inner = gripper_rhs;
            },
        ];
    }

    // Objects
    class Object
    {
        Background = 
        {
            Selected = focusHighlight;
            else = Rectangle()
            {
                CornerRadius = 3;
                GradientStops = {
                    0.0 = colorComponentTop;
                    1.0 = colorComponentBottom;
                };
                GradientKind = Vertical;
            };
        };
        TextColor = Color.White;
        Font = fontNormal;
    }

    class Object<color> : Object
    {
        Background = 
        {
            Selected = focusHighlight;
            else = Rectangle()
            {
                CornerRadius = 3;
                GradientStops = {
                    0.0 = color;
                    1.0 = color.WithAlpha(0.8);
                };
                GradientKind = Vertical;
            };
        };
    }

    // Common settings for object ports
    class ObjectPorts
    {
        Padding = (0, 3, 0, 3);
        PortTextColor = colorText;
        PortFont = fontSmall;
        WireIntrude = 5;
    }

    // The input port area for objects (appears above the main component rectangle)
    class ObjectInputPorts : ObjectPorts
    {
        Background = Frame()
        {   
            Padding = (5, 0, 22, 0);
            Inner = colorWiringPortArea;
        };
        PortBackground = Frame()
        {
            Padding = (5, 0, 22, 0);
            Inner = {
                Hover = colorWiringSelectedPort;
            };
        };
        PortTextPadding = (10, 0, 22, 0);
        PortTextAlign = LeftCenter;
    }

    // The output port area for objects (appears below the main component rectangle)
    class ObjectOutputPorts : ObjectPorts
    {
        Background = Frame()
        {
            Padding = (22, 0, 5, 0);
            Inner = colorWiringPortArea;
        };
        PortBackground = Frame()
        {
            Padding = (22, 0, 5, 0);
            Inner = {
                Hover = colorWiringSelectedPort;
            };
        };
        PortTextPadding = (22, 0, 10, 0);
        PortTextAlign = RightCenter;
    }

    // Wires connecting ports
    class Wires
    {
        // Base colors for different wire types
        TypeColors = 
        {
            "MIDI" = #800000;
            "Audio" = #008000;
        };

        // These colors will be blended with the base wire color
        Colors = 
        {
            Hover = colorBaseForeground.WithAlpha(0.25);
            Selected = colorFocus;
            Disabled = colorBaseBackground.WithAlpha(0.5);
            else = Color.Clear;
        };

        // The fill color for the circles at the end of selected wires
        HandleFillColor = Color.Black;
    }
}



class NotificationButton
{
    Background = {
        Hover = Rasterize()
        {
            Size = (18,18);
            Inner = Rectangle()
            {
                FillColor = colorBaseForeground.WithAlpha(0.2);
                CornerRadius = 3;
            };
        };
    };
}

class NotificationButton<svg, padding> : NotificationButton
{
    Image = Frame()
    {
        InnerSize = (18,18);
        Gravity = Center;
        Inner = Rasterize()
        {
            Size = (18,18);
            Padding = padding;
            Inner = Path()
            {
                SvgData = svg;
                FillColor = colorWarning;
            };
        };
    };
}

class StatusPanel
{
    Background = Rasterize()
    {
        Size = (390, 50);
        Inner = Rectangle()
        {
            GradientStops = {
                0.0 = colorStatusPanelTop;
                1.2 = colorStatusPanelBottom;
            };
            GradientKind = Vertical;
            StrokeColor = colorPanelBorder;
            StrokeWidth = 1.5;
            CornerRadius = 3;
        };
    };

    class QuickControllerText 
    {
        Font = fontLarge;
        Gravity = Center;
        TextColor = colorText;
    }
    class QuickControllerPlaceholder 
    {
        TextColor = colorText;
    }
    class Text 
    {
        TextColor = 
        {
            Error = colorWarning;
            else = colorText;
        };
        Font = fontLarge;
        Gravity = Center;
    }
    class TransportPosition 
    {
        TextColor = colorText;
        Font = fontLarge;
        Gravity = Center;
    }
    class LoadMeter 
    {
        TextColor = colorText;
        Gravity = Left;
    }
    class TimeSigTempo 
    {
        TextColor = colorText;
        Gravity = Center;
    }
    class UpdateAvailableButton : NotificationButton<svg_UpdateAvailable,1> {}
    class BlogPostAvailableButton : NotificationButton<svg_BlogAvailable,3> {}
    class PromoAvailableButton : NotificationButton
    {
        Font = Font("FontAwesome", 17);
        TextColor = colorWarning;
    }
}

context MidiMonitor
{
    class SidePanel {}
    class Toolbar {}
    class PauseButton {}
    class ProbePointDropDown {}
    class Stats {}
    class FileMenuButton {}
}

class ToolbarSeparator
{
    Background = colorBorder;
}


// Helper to create a record button image
var makeRecordButton = (pressed, recording, autorecord) => Rasterize()
{
    Size = (30, 30);
    Gravity = Center;
    Inner = [
        Ellipse()
        {
            // The green auto-record ring
            Bounds = (0, 0, 30, 30);
            Radius = (13, 13);
            Center = (15, 15);
            StrokeWidth = autorecord ? 2 : 0;
            StrokeColor = #00FF00;
            InsetByStrokeWidth = false;
        },
        Ellipse()
        {
            // The main button fill
            Bounds = (0, 0, 30, 30);
            Radius = (autorecord ? 10 : 12, autorecord ? 10 : 12);
            Center = (15, 15);
            GradientStops = {
                0.0 = recording ? colorRecord : (pressed ? colorToolbarButtonPressed : colorToolbarButton);
                1.0 = recording ? Color.Blend(colorRecord, Color.Black.WithAlpha(0.3)) : (pressed ? colorToolbarButtonPressed : colorToolbarButton);
            };
            GradientKind = Vertical;
            ShadowColor = recording ? colorRecord : Color.Clear;
            ShadowSigma = recording ? (4,4) : (0,0);
        },
        Ellipse()
        {
            // Bevel highlight when recording
            Bounds = (0, 0, 30, 30);
            Radius = (autorecord ? 10 : 12, autorecord ? 10 : 12);
            Center = (15, 15);
            StrokeWidth = recording ? 1 : 0;
            StrokeColor = Color.Blend(colorRecord, Color.White.WithAlpha(0.5));
        },
    ];
};

// Helper to make a glowing image
var makeGlowImage = (size, svg, color) => Rasterize()
{
    Size = (size, size);
    Gravity = Center;
    Inner = [
        Path()
        {
            SvgData = svg;
            GradientStops = {
                0.0 = color;
                1.0 = Color.Blend(color, Color.Black.WithAlpha(0.3));
            };
            GradientKind = Vertical;
            ShadowColor = color;
            ShadowSigma = (2,2);
        },
        Path()
        {
            SvgData = svg;
            StrokeWidth = 1;
            StrokeColor = Color.Blend(color, Color.White.WithAlpha(0.5));
        },
    ];
};


// Helper to make the live mode button
// (This is a special case because it's composed of three elements with different alphas)
var makeLiveModeButton = (color) => Rasterize()
{
    Size = (30,30);
    Gravity = Center;
    Inner = [
        Path()
        {
            SvgData = svg_LiveMode1;
            FillColor = color.WithAlpha(0.25);
        },
        Path()
        {
            SvgData = svg_LiveMode2;
            FillColor = color.WithAlpha(0.25);
        },
        Path()
        {
            SvgData = svg_LiveMode3;
            FillColor = color;
        },
    ];
};

// The main toolbar
class MainToolbar
{
    Background = BorderFrame(null, colorPanelBorder, Bottom);

    class RecordButton
    {
        Image = Frame()
        {
            InnerSize = (30,30);
            Gravity = Center;
            Inner =
            {
                // Checked = recording
                // Selected = auto record enabled
                Checked && Selected = makeRecordButton(false, true, true);
                Checked && !Selected = makeRecordButton(false, true, false);
                !Pressed && !Checked && Selected = makeRecordButton(false, false, true);
                !Pressed && !Checked && !Selected = makeRecordButton(false, false, false);
                Pressed && !Checked && Selected = makeRecordButton(true, false, true);
                Pressed && !Checked && !Selected = makeRecordButton(true, false, false);
                else = makeRecordButton(false, false, false);
            };
        };
    }

    class PlayButton : GlowButton<30, svg_Play, colorPlay> {}
    class PauseButton : GlowButton<30, svg_Pause, colorPause> {}
    class StopButton : ToolbarButton<30, svg_Stop> {}
    class MetronomeButton : ToolbarButton<30, svg_Metronome> {}
    class TapTempoButton : ToolbarButton<30, svg_Tempo> 
    {
        // StateChecked && ~StateAlternate for down beat
        // StateChecked && StateAlternate for other beats
        Background = 
        {
            // Down beat flash
            Checked && !Alternate = Rectangle()
            {
                FillColor = colorLedOn;
                CornerRadius = 3;
            };

            // Other beat flash
            Checked && Alternate = Rectangle()
            {
                FillColor = colorText.WithAlpha(0.25);
                CornerRadius = 3;
            };
        };
    }
    class LiveModeButton 
    {
        Image = Frame()
        {
            InnerSize = (30,30);
            Gravity = Center;
            Inner =
            {
                Checked = makeLiveModeButton(colorLiveMode);
                Pressed = makeLiveModeButton(colorToolbarButtonPressed);
                else = makeLiveModeButton(colorToolbarButton);
            };
        };
    }
    class PanicButton : ToolbarButton<30, svg_Panic> {}
    class PowerButton : GlowButton<30, svg_Power, colorLedOn, colorBusy> { }
}

// The metronome toolbar
class MetronomeToolbar
{
    Background = BorderFrame(null, colorPanelBorder, Bottom);
    class TextButton : ToolbarTextButton
    {
        Font = fontNormal;
        Gravity = Center;
    }
    class IncTempoButton : IncDecButton<CornerMask.TopRight|CornerMask.BottomRight, svg_Increment> {}
    class DecTempoButton : IncDecButton<CornerMask.TopLeft|CornerMask.BottomLeft, svg_Decrement> {}
    class EnableSoundsButton : TransparentButton
    {
        Image = Frame()
        {
            InnerSize = (18,16);
            Gravity = Center;
            Inner = {
                Checked && (Focused || Pressed) = makeMetronomeSoundsImage(colorFocusText, colorFocusText, true);
                Checked = makeMetronomeSoundsImage(colorToolbarButton, colorWarning, true);
                Focused || Pressed = makeMetronomeSoundsImage(colorFocusText, colorFocusText, false);
                else = makeMetronomeSoundsImage(colorToolbarButton, colorWarning, false);
            };
        };
    }


    class IncDecButton<corners, svg>
    {
        Background = {
            Pressed = makeIncDecButton(colorText.WithAlpha(0.25), corners, svg);
            else = makeIncDecButton(colorText.WithAlpha(0.1), corners, svg);
        };
        Image = Frame()
        {
            InnerSize = (13,13);
            Inner = Rasterize()
            {
                Size = (13,13);
                Inner = Path()
                {
                    SvgData = svg;
                    FillColor = colorText;
                };
            };
        };

        const makeIncDecButton = (color, corners, svg) => Rasterize()
        {
            Size = (24,24);
            Inner = Rectangle()
            {
                FillColor = color;
                CornerRadius = 3;
                CornerMask = corners;
            };
        };
    }

    const makeMetronomeSoundsImage = (color1, color2, checked) => Rasterize()
    {
        Size = (18,16);
        Inner = [
            Path()
            {
                SvgData = svg_MetronomeSoundsOn;
                FillColor = checked ? color1 : Color.Clear;
            },
            Path()
            {
                SvgData = svg_MetronomeSoundsOff1;
                FillColor = checked ? Color.Clear : color1;
            },
            Path()
            {
                SvgData = svg_MetronomeSoundsOff2;
                FillColor = checked ? Color.Clear : color2;
            },
        ];
    };
}



// Base class for checkmarks shown in recordings, set lsit and states side-panel
class SidePanelCheck<round, svg>
{
    Image = Frame()
    {
        InnerSize = (14,14);
        Inner = {
            Checked && Selected && ContainerFocused = makeSidePanelCheck(colorFocusText, colorFocusText, colorFocus, round, svg);
            Checked = makeSidePanelCheck(colorFocus, colorFocus, colorFocusText, round, svg);
            Selected && ContainerFocused = makeSidePanelCheck(colorFocusText, Color.Clear, Color.Clear, round, svg);
            else = makeSidePanelCheck(colorDisabledText, Color.Clear, Color.Clear, round, svg);
        };
    };

    // Makes a checkmark, radio, export icon for items in the side panels (states, recordings, set list)
    const makeSidePanelCheck = (borderColor, fillColor, checkColor, round, svg) => Rasterize()
    {
        Size = (14,14);
        Inner = [
            Rectangle()
            {
                Bounds = (0, 0, 14, 14);
                Position = (0, 0, 14, 14);
                CornerRadius = 1.5;
                StrokeColor = round ? Color.Clear : borderColor;
                StrokeWidth = 1;
                FillColor = round ? Color.Clear : fillColor;
            },
            Ellipse()
            {
                Bounds = (0, 0, 14, 14);
                Center = (7,7);
                Radius = (7,7);
                StrokeColor = round ? borderColor : Color.Clear;
                StrokeWidth = 1;
                FillColor = round ? fillColor : Color.Clear;
            },
            Path()
            {
                SvgData = svg;
                FillColor = checkColor;
            }
        ];
    };


}


// Simple symbol like reset icon, locked icon, linked icon etc...
class SidePanelSymbol<color, svg>
{
    Image = Frame()
    {
        InnerSize = (16, 16);
        Gravity = Center;
        Inner = {
            Selected && ContainerFocused = makeImage(16, svg, colorFocusText);
            else = makeImage(16, svg, color);
        };
    };
}

// Default background for list items in the side panel
class SidePanelItem
{
    Background = {
        Selected && ContainerFocused = VerticalGradient(colorFocus, colorFocusGradient);
    };

    class Text
    {
        TextColor = {
            Inactive = colorDisabledText;
            else = colorText;
        };
        Font = {
            Checked = fontBold;
            else = fontNormal;
        };
    }

    class InfoText
    {
        TextColor = colorDimText;
        Font = fontSmall;
    }


}



// The "Recording" panel tab
class RecordingsPanel : SidePanelContent
{
    class Item : SidePanelItem
    {
        class PinIcon : SidePanelCheck<false, svg_PinIcon> {}
    }
}


// The "Record Ports" panel
class RecorderPortsPanel : SidePanelContent
{
    class Item : SidePanelItem
    {
        class AutoRecordButton
        {
            Image = Frame()
            {
                InnerSize = (14,14);
                Inner = {
                    Checked = makeRoundLed(14, 2, colorLedOn, true);
                    else = makeRoundLed(14, 2, colorLedOff, false);
                };
            };
        }
        class EnableButton : SidePanelCheck<false, svg_Check> {}
    }
}

// The "Set List" panel
class SetListPanel : SidePanelContent
{
    class Item : SidePanelItem
    {
        class Button : SidePanelCheck<true, svg_Check> {}
    }
    class BreakItem : SidePanelItem
    {
        class Text
        {
            TextColor = colorText;
            Font = fontBold;
        }
    }
}

// The "States" panel
class StatesPanel : SidePanelContent
{
    class Item : SidePanelItem
    {
        class Button : SidePanelCheck<true, svg_Check> {}
        class ResetIcon : SidePanelSymbol<colorToolbarButton, svg_Reset> {}
        class LinkedIcon : SidePanelSymbol<colorToolbarButton, svg_Linked> {}
        class LockedIcon : SidePanelSymbol<colorToolbarButton, svg_Lock> {}
    }
}

// The "State Behaviours" panel
class StateBehaviourPanel : SidePanelContent
{
    class Item : SidePanelItem
    {
        class ExportButton : SidePanelCheck<false, svg_Export> {}
        class EnableButton : SidePanelCheck<false, svg_Check> {}
        class ResetIcon : SidePanelSymbol<colorWarning, svg_Reset> {}
        class NonLinkedIcon : SidePanelSymbol<colorToolbarButton, svg_Unlinked> { }
    }
}

// The "Port Activity" panel
class PortsMonitorPanel : SidePanelContent
{
    class Item : SidePanelItem {}
}

// The "Load & Info" panel
class LoadMonitorPanel : SidePanelContent
{
    class Item : SidePanelItem
    {
        class Value
        {
            TextColor = colorText;
            Background = Rectangle()
            {
                FillColor = colorBaseBackground;
                StrokeWidth = 1;
                StrokeColor = colorPanelBorder;
                CornerRadius = 1.5;
            };
        }   
    }
}

class HamburgerButton
{
    Background = {
        Pressed = colorFocus;
    };
    Image = Frame()
    {
        InnerSize = (12,12);
        Gravity = Center;
        Inner = makeImage(12, svg_Hamburger, colorText);
    };
}

// The title bars on side panels
class PanelTitle
{
    Background = {
        Alternate = BorderFrame(colorForm, colorPanelBorder, Top);
        else = colorForm;
    };

    class TitleText
    {
        TextColor = colorText;
    }

    class MenuButton : HamburgerButton
    {
    }
}

// The shell tray notify icon
class NotifyIcon
{
    IconBusy = Image("NotifyIcon_busy.png", Center);
    IconStopped = Image("NotifyIcon_stopped.png", Center);
    IconStoppedBusy = Image("NotifyIcon_stopped_busy.png", Center);
    IconRunning = Image("NotifyIcon_running.png", Center);
}

// The plugin selector dialog
class PluginSelector
{
    IconFolderOpen = Image("FolderOpen.png", Center);
    IconFolderClosed = Image("FolderClosed.png", Center);
    IconPlugin = Image("Plugin.png", Center);
    IconPluginSynth = Image("PluginSynth.png", Center);
    IconPluginEffect = Image("PluginEffect.png", Center);
}



// The controller bar
class ControllerBar
{
    // The main controller bar background
    Background = BorderFrame(colorForm, colorPanelBorder, Top);

    // The frame around each button and its title
    class ButtonFrame
    {
        // The small title above the controller bar button
        class Title
        {
            TextColor = colorDimText;
            Font = fontSmall;
            Gravity = Center;
        }

        // User defined button
        class Button : ControllerBarButton {}

        // Built in buttons
        class RecordButton : ControllerBarButton 
        {
            Image = {
                Checked && Selected = makeRecordButton(false, true, true);
                Checked && !Selected = makeRecordButton(false, true, false);
                !Pressed && !Checked && Selected = makeRecordButton(false, false, true);
                !Pressed && !Checked && !Selected = makeRecordButton(false, false, false);
                Pressed && !Checked && Selected = makeRecordButton(true, false, true);
                Pressed && !Checked && !Selected = makeRecordButton(true, false, false);
                else = makeRecordButton(false, false, false);
            };
        }
        class PlayButton : GlowButton<30, svg_Play, colorPlay>, ControllerBarButton {}
        class PauseButton : GlowButton<30, svg_Pause, colorPause>, ControllerBarButton {}
        class StopButton : ToolbarButton<30, svg_Stop>, ControllerBarButton {}
        class TempoButton : ToolbarButton<30, svg_Tempo>, ControllerBarButton 
        {
            Background = 
            {
                Pressed = focusHighlightPressed;
                Checked && !Alternate = colorLedOn;
                Checked && Alternate = colorText.WithAlpha(0.25);
                else = colorText.WithAlpha(0.05);
            };
        }
        class ButtonGroup : ControllerBarButton 
        {
            class Next : ToolbarButton<30, svg_Next>, ControllerBarGroupButton  { }
            class Previous : ToolbarButton<30, svg_Prev>, ControllerBarGroupButton  { }
            class Button : ControllerBarGroupButton {}
        }
        class ContinueButton : ToolbarButton<30, svg_Continue>, ControllerBarButton  {}
    }

    // A controller bar button
    class ControllerBarButton
    {
        Background = {
            Pressed = focusHighlightPressed;
            else = colorText.WithAlpha(0.05);
        };
        TextColor = {
            Pressed = colorText;
            else = colorToolbarButton;
        };
        Font = fontLarge;
    }

    // A controller bar group button (eg: the song pick with next/previous sub-buttons)
    class ControllerBarGroupButton : ControllerBarButton
    {
        Background = {
            Pressed = focusHighlightPressed;
        };
    }
}


// The "Timeline" panel
// (see TimelineView for the timeline itself)
class TimelinePanel
{
    Background = BorderFrame(colorForm, colorPanelBorder, Top);
    class PlayButton : TransparentButton, GlowButton<18, svg_Play, colorPlay> {  }
    class PauseButton : TransparentButton, GlowButton<18, svg_Pause, colorPause>  {  }
    class StopButton : TransparentButton, ToolbarButton<18, svg_Stop> {  }
    class RewindButton : TransparentButton, ToolbarButton<18, svg_Rewind> {  }
    class FastForwardButton : TransparentButton, ToolbarButton<18, svg_FastForward> {  }
    class PreviousMarkerButton : TransparentButton, ToolbarButton<18, svg_PreviousMarker> {  }
    class NextMarkerButton : TransparentButton, ToolbarButton<18, svg_NextMarker> {  }
    class MenuButton : HamburgerButton { }
}

// The keyboard panel
// (see OnscreenKeyboard for the keyboard itself)
class KeyboardPanel
{
    Background = BorderFrame(#202C3A, colorPanelBorder, Top);

    // The little channel/capture panel in the bottom right
    class Controls
    {
        Background = Rectangle()
        {
            FillColor = colorBaseBackground.WithAlpha(0.5);
            TopLeftCornerRadius = 10;
        };

        class ChannelButton
        {
            TextColor = colorText;
        }

        class CaptureButton
        {
            Image = {
                Checked = makeSquareLed(16, 4, colorLedOn, true);
                else = makeSquareLed(16, 4, colorLedOff, false);
            };
       }
    }
}

// A normal slot button with image with different colors for checked vs unchecked
class SlotButton<svgNormal, colorNormal, svgChecked, colorChecked> : SlotButton
{
    Image = Frame()
    {
        InnerSize = (16, 16);
        Gravity = Center;
        Inner =
        {
            Checked && (Pressed || Focused || Selected) = makeImage(16, svgChecked, colorFocusText);
            Checked = makeImage(16, svgChecked, colorChecked);
            (Pressed || Focused || Selected) = makeImage(16, svgNormal, colorFocusText);
            else = makeImage(16, svgNormal, colorNormal);
        };
    };
}

// Slot enable button - supports tick mark check, cross mark unchecked, and error mode
class SlotEnableButton : SlotButton
{
    Image = Frame()
    {
        InnerSize = (16, 16);
        Gravity = Center;
        Inner =
        {
            Checked && (Pressed || Focused || Selected) && Error = makeImage2(16, svg_Enabled, colorFocusText, svg_Error, colorFocusText);
            Checked && Error = makeImage2(16, svg_Enabled, colorDisabledText, svg_Error, colorError);
            Checked && (Pressed || Focused || Selected) = makeImage(16, svg_Enabled, colorFocusText);
            Checked = makeImage(16, svg_Enabled, colorToolbarButton);
            Pressed || Focused || Selected = makeImage(16, svg_Disabled, colorFocusText);
            else = makeImage(16, svg_Disabled, colorWarning);
        };
    };
}

// Other icons/buttons shown in slots
class SlotBypassButton : SlotButton<svg_BypassOff, colorToolbarButton, svg_BypassOn, colorWarning> {}
class SlotPlayButton : TransparentButton, GlowButton<18, svg_Play, colorPlay> {  }
class SlotPauseButton : TransparentButton, GlowButton<18, svg_Pause, colorPause>  {  }
class SlotStopButton : TransparentButton, ToolbarButton<18, svg_Stop> {  }
class SlotRackTypeIcon : SlotButton<svg_LinkedRack, colorToolbarButton, svg_EmbeddedRack, colorToolbarButton> {}
class SlotMidiFiltersButton : TransparentButton, GlowButton<18, svg_MidiFilter, colorMidiFilters> {  }


// Bidirection binding button
// This is a complicated button because it uses multiple colors, has three states and can have an error mode too.
class SlotBidiButton : TransparentButton
{
    Image = Frame()
    {
        InnerSize = (16, 16);
        Gravity = Center;
        Inner =
        {
            Checked && Alternate && Error && (Focused || Pressed || Selected) && ContainerFocused = makeImage2(16, svg_BidiHalf, colorFocusText, svg_Error, colorFocusText);
            Checked && Alternate && Error = makeImage2(16, svg_BidiHalf, colorDisabledText, svg_Error, colorError);
            Checked && Error && (Focused || Pressed || Selected) && ContainerFocused = makeImage2(16, svg_BidiFull, colorFocusText, svg_Error, colorFocusText);
            Checked && Error = makeImage2(16, svg_BidiFull, colorDisabledText, svg_Error, colorError);
            Checked && Alternate && (Focused || Pressed || Selected) && ContainerFocused = makeImage2(16, svg_BidiHalfForward, colorFocusText, svg_BidiHalfReverse, colorFocusText);
            Checked && Alternate = makeImage2(16, svg_BidiHalfForward, colorWarning, svg_BidiHalfReverse, colorFocusText);
            Checked && (Focused || Pressed || Selected) && ContainerFocused = makeImage(16, svg_BidiFull, colorFocusText);
            Checked = makeImage(16, svg_BidiFull, colorWarning);
            else = makeImage(16, svg_BidiOff, colorToolbarButton);
        };
    };
}


class Splitter
{
    Background = colorPanelBorder;
}

class ShowNotesPanel
{
    class Note
    {
        // State inactive set if showing hidden items

        FixedPitchFaceName = "GuiKitMono";
        VariablePitchFaceName = "GuiKitSans";

        class Text
        {
            // State inactive if showing hidden items
        }
    }
}


class SetListGrid
{
    // The facename for everything
    FaceName = "GuiKitSans";

    // The grid button in the toolbar
    class GridButton {}
    class PinnedButton {}

    // A song item
    class Item 
    {
        // The button itself
        class Button 
        {
            // The program number
            class ProgramNumber {}

            // The overrides label
            class Overrides {}
        }

        // Colored button
        class Button<color> : Button
        {

        }
    }

    // A set list break item
    class Title 
    {

    }
}



context DelayLoadPopup
{

}


class CustomRackButton
{
    // Alternate when button is blank
}


context Profiler
{
    class Toolbar 
    {
        // StateError set when checked, show in red
    }
    class PauseButton {}
    class PreviousButton {}
    class NextButton {}
    class TimeStamp {}
    class FileMenuButton {}

    class Metric {}
    class MetricName {}
    class MetricValue {}


    class Histogram
    {

    }
}

context PluginEditor
{
    class Toolbar
    {

    }

    class SwitchEditorsButton {}
    class PreviousPresetButton {}
    class NextPresetButton {}
    class PresetDropDown {}
    class LockedPresetButton {}
    class NativePresetButton {}
    class BypassButton {}
    class FileMenuButton {}
    class AButton {}
    class BButton {}
    class RandomizeButton {}
    class ConstrainButton {}
    class ParameterPanel {}
    class ParameterNumber {}
    class ParameterName {}
    class ParameterValue {}
    class ParameterCheckbox {}
}

class PromoBar
{
    class Icon {}
    class Title {}
    class SubTitle {}
    class ActionButton {}
    class CloseButton {}
}





context MidiMonitor
{
    class ChannelHeader {}
    class ControllerRow {}
    class ControllerRow_Title {}
    class ControllerRow_Value {}
}

