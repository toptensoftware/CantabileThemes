// Cantabile GUI Theme

// Import the default GuiKit Dark theme
import("GuiKit.Dark");

// Some common used fonts and images
var tinyFont = Font("GuiKitSans", 10, false);
var smallFont = Font("GuiKitSans", 11, false);
var defaultFont = Font("GuiKitSans", 12, false);
var boldFont = Font("GuiKitSans", 12, true);
var largeFont = Font("GuiKitSans", 18, true);
var subtleHighlight = NineSliceImage("SubtleHighlight.png", 5, 5);
var focusHighlight = NineSliceImage("FocusHighlight.png", 5, 5);
var focusHighlightPressed = NineSliceImage("FocusHighlight_pressed.png", 5, 5);

// The beat indicator in the main status panel
class BeatIndicator
{
	FirstBeatColor: #00FF00,
	OtherBeatsColor: #dfe1e5,
}

// MIDI Activity Indicator
class MidiActivityIndicator
{
	Indicator:
    {
        // Checked state is used for MIDI activity (bright led)
        Checked: Image("LedSmallGreen.png", Center),

        // Indeterminate state is used for MIDI sense activity (dim led)
        Indeterminate: Image("LedSmallSense.png", Center),

        // Any other state is displayed as "off".
        else: Image("LedSmallOff.png", Center)
    },
}

// Key Range Indicator
class KeyRangeIndicator
{
    Frame: NineSliceImage("KeyRangeIndicatorFrame.png", 5),
    KeyRangeIndicator: NineSliceImage("KeyRangeIndicator.png", 3, 0),
    TransposeIndicator: NineSliceImage("KeyRangeIndicatorTranspose.png", 3, 0),
    OctaveIndicatorColor: #10000000,
}

// Level Meter
class LevelMeter
{
    Frame:
    {
        // Checked state is use for when clipped indicator active
        Checked: NineSliceImage("LevelMeterFrame_clipped.png", 3),

        // Normal state
        else: NineSliceImage("LevelMeterFrame.png", 3),
    },

    // Normal indicator level color
    IndicatorColorCold: #404040,

    // Indicator color when level is high.  Will fade to this color
    // according to the hot levels reported by the control curve
    // being used for level meters
    IndicatorColorHot: #ff6600,

    // Tick Colors
    MajorTickColor: #808080,
    MinorTickColor: #808080,
}

// Knob
class Knob
{
    Knob: 
    {
        Focused: TileSetImage("Knob_focused.png", 8, 8),
        else: TileSetImage("Knob.png", 8, 8)
    }
}

// Combined level meter/slider
class CombinedSliderMeter
{
    Handle:
    {
        // NB: Use ContainsFocus as the focus is actually given 
        //     to the hidden child slider control
        ContainsFocus: Image("LevelMeterHandle_hot.png", Center),
        else: Image("LevelMeterHandle.png", Center),
    }
}

// Base class for Cantabile buttons with no background highlight
class CantabileButton : Button
{
    Background:
    {
        Pressed: focusHighlightPressed,
        Focused: focusHighlight,
    },
}

// Base class for buttons with a subtle background highlight
class SubtleButton : Button
{
    Background:
    {
        Pressed: focusHighlightPressed,
        Focused: focusHighlight,
        else: subtleHighlight,
    },
}

// Number Pad Button
class NumberPadButton : SubtleButton
{
    Font: largeFont,
}

// Run Mode Button
class RunModeButton : CantabileButton
{
    Image:
    {
        Error: Image("RunMode_error.png", Center),
        Checked && Indeterminate: Image("RunMode_suspended.png", Center),
        Checked: Image("RunMode_running.png", Center),
        else: Image("RunMode_unloaded.png", Center),
    }
}

// Base class for all side panels
class SidePanel
{
    Background: #202c3a,
}

// Tip Panel
class TipPanel : SidePanel
{
}

// Tip Panel button
class TipPanelButton : SubtleButton
{
    Padding: EdgeInsets(10, 3),
}

// Tip Panel Text
class TipPanelText
{
    TextColor: #FFFFFF,
}

// Slide control
class CantabileSlider : Slider
{
    Thumb:
    {
        Focused: Image("SliderHandle_focused.png", Center),
        else: Image("SliderHandle.png", Center),
    },
    TrackRange: NineSliceImage("SliderTrackRangeA.png", 5, 0),
    TrackRangeAlt: NineSliceImage("SliderTrackRangeB.png", 5, 0),
    Track: NineSliceImage("SliderTrack.png", 14, 0),
}

// SoloModeButton
class SoloModeButton : CantabileButton
{
    Image:
    {
        Indeterminate: Image("SoloButton_muted.png", Center),
        Checked: Image("SoloButton_on.png", Center),
        else: Image("SoloButton_off.png", Center),
    }
}

// Onscreen Keyboard
class OnscreenKeyboard
{
    // NB: Key images use ScaleMatchMode.Lower which means to use the lower
    //     resolution image if no exact match.  This keeps the lines between
    //     keys thinner for intermediate scaling factors.

    // White key in a normal state
    WhiteKey: NineSliceImage("OskKey_white.png", 3) { ScaleMatchMode: Lower },

    // Middle-C key in a normal state (only used in compact mode)
    MiddleCKey: NineSliceImage("OskKey_middlec.png", 3)  { ScaleMatchMode: Lower },

    // Black key in a normal state
    BlackKey: NineSliceImage("OskKey_black.png", 3)  { ScaleMatchMode: Lower },

    // Black or white key highlighted (ie: showing pressed note from another source)
    HighlightedKey: NineSliceImage("OskKey_highlight.png", 3)  { ScaleMatchMode: Lower },

    // Black or white key in pressed state
    PressedKey: NineSliceImage("OskKey_pressed.png", 3)  { ScaleMatchMode: Lower },

    // Range indicators
    RangeHandle:
    {
        Focused: Image("OskRangeHandle_focused.png", Center),
        else: Image("OskRangeHandle.png", Center),
    },
    RangeBar: NineSliceImage("OskOctaveBar.png", 4, 1),
    RangeFont: smallFont,
    RangeTextColor: #FFFFFF, 

    // Octave indicators
    OctaveBar:
    {
        Focused: NineSliceImage("OskOctaveBar_focused.png", 4, 1),
        else: NineSliceImage("OskOctaveBar.png", 4, 1)
    },
    OctaveLabelFont: tinyFont,
    OctaveLabelTextColor: #dfe1e5,
    OctaveLabelDividerColor: #43464c,
}

// Expand/Collapse Button
class ExpandButton : CantabileButton
{
    Image:
    {
        Checked: Image("ExpandButton_expanded.png", Center),
        else: Image("ExpandButton_collapsed.png", Center),
    }
}

// Gripper handle on the LHS of table rows
class Gripper
{
    Background: Image("Gripper_lhs.png", Center),
}

// A button in a table row
class SlotButton
{
    Background:
    {
        Pressed: focusHighlightPressed,
        Focused: focusHighlight,
    },
    TextColor:
    {
        Inactive: #808080,
        else: #FFFFFF
    },
    Padding: EdgeInsets(3, 0),
}

// The (>) "disclosure arrow" on the rhs of some slot buttons
class DisclosureArrow
{
    Background:
    {
        ContainerFocused: Image("DisclosureButton_focused.png", Center),
        Selected: Image("DisclosureButton_focused.png", Center),
        else: Image("DisclosureButton.png", Center),
    },
    Padding: EdgeInsets(3,4,3,3),
}

// Common base style for all table rows
class TableRow_common
{
    Background:
    {
        Selected && ContainerFocused: VerticalGradient(#058cF5, #015DE6),
        Selected: VerticalGradient(#023258, #00255b),
        CurrentItem: #0e1721,
        else: #121212,
    },
    BorderColor: 
    {
        Selected: #00000000,        // Don't draw horizontal grid lines when selected
        else: #43464c,
    }
}

class TableRow_TopLevelItem : TableRow_common
{
}

class TableRow_ChildItem : TableRow_common
{
    Background:
    {
        Selected && ContainerFocused: VerticalGradient(#058cF5, #015DE6),
        Selected: VerticalGradient(#023258, #00255b),
        CurrentItem: NineSliceImage("TableRowChild_focused.png", 32, 0, 0, 0),
        else: NineSliceImage("TableRowChild.png", 32, 0, 0, 0),
    },
    BorderColor: #00000000,
}

class TableRow_ChildFooter : TableRow_common
{
    Background:
    {
        Selected && ContainerFocused: VerticalGradient(#058cF5, #015DE6),
        Selected: VerticalGradient(#023258, #00255b),
        CurrentItem: NineSliceImage("TableRowChild_focused.png", 32, 0, 0, 0),
        else: NineSliceImage("TableRowChild.png", 32, 0, 0, 0),
    },
}

scope PopupMenu
{
    class PopupBackground
    {
        fillColor: #121212,
    }

    class Title
    {
        Background: #222326,
        TextColor: #949599,
        Padding: EdgeInsets(5, 5),
        Font: boldFont,
    }

    class Item
    {
        Padding: EdgeInsets(10, 0, 0, 0),
        Gravity: LeftCenter,
        Background:
        {
            CurrentItem: focusHighlightPressed,
            Focused: focusHighlight,
        },
        TextColor: #dfe1e5,
    }

    class AccessoryContainer
    {
        Background: #222326,
    }
}

class GroupButton<align,image>
{
    Background:
    {
        Pressed: NineSliceImage("Group" + align + ".png", 5, 5).Recolor(#404143),
        Selected: NineSliceImage("Group" + align + ".png", 5, 5).Recolor(#002d62),
        else: NineSliceImage("Group" + align + ".png", 5, 5).Recolor(#313235),
    },
    Image:
    {
        Pressed || Selected: Image(image + ".png", Center).Recolor(#FFFFFF),
        else: Image(image + ".png", Center).Recolor(#979797),
    }
}

class TableViewButton : GroupButton<"Left","TableView"> {}
class DiagramViewButton : GroupButton<"Right","DiagramView"> {}


scope TabBar
{
    class TabBar
    {
        Background: #222326,
        BorderColor: #43464c,
    }

    class Button
    {
        Background:
        {
            Pressed: NineSliceImage("RoundedRect.png", 5, 5).Recolor(#404143),
            Selected: NineSliceImage("RoundedRect.png", 5, 5).Recolor(#002d62),
          //  else: #FF0000.WithAlpha(0.3)
        },
        TextColor:
        {
            Alternate: #00000000,               // In small mode, hide text on eject button
            Selected || Pressed: #dfe1e5,
            else: #949599,
        },
        Padding: EdgeInsets(15, 3),
        Font: boldFont,
    }

    class EjectButton : Button
    {
        Padding: EdgeInsets(10, 3, 30, 3),
        Image:
        {
            Pressed && Alternate: Image("EjectButton.png", Center).Recolor(#dfe1e5),
            Alternate: Image("EjectButton.png", Center).Recolor(#949599),   
            Pressed: Image("EjectButton.png", RightCenter).Recolor(#dfe1e5),
            else: Image("EjectButton.png", RightCenter).Recolor(#949599),   
        },
    }

}

